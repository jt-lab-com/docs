"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[995],{847:(e,r,n)=>{n.d(r,{A:()=>t});const t=n.p+"assets/images/create-scanerio-runtime-intro-dac0f38059cc07795ab432a8923c9356.jpg"},3969:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"jt-lib/script-launch","title":"Script Launch","description":"To launch a trading script in JT-Trader, you need to create a scenario (runtime) that will launch the Script class defined in the strategy file.","source":"@site/docs/jt-lib/script-launch.md","sourceDirName":"jt-lib","slug":"/jt-lib/script-launch","permalink":"/docs/docs/jt-lib/script-launch","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/script-launch.md","tags":[],"version":"current","frontMatter":{"id":"script-launch","title":"Script Launch","sidebar_label":"Script Launch"},"sidebar":"tutorialSidebar","previous":{"title":"Introduction and Architecture","permalink":"/docs/docs/jt-lib/introduction-architecture"},"next":{"title":"Best Practices","permalink":"/docs/docs/jt-lib/script-best-practices"}}');var i=n(4848),s=n(8453);const a={id:"script-launch",title:"Script Launch",sidebar_label:"Script Launch"},l="Script Launch",c={},o=[{value:"How It Works",id:"how-it-works",level:2},{value:"Creating a Scenario in JT-Trader",id:"creating-a-scenario-in-jt-trader",level:2},{value:"1. Navigate to Runtime Tab",id:"1-navigate-to-runtime-tab",level:3},{value:"2. Creating a New Scenario",id:"2-creating-a-new-scenario",level:3},{value:"3. Scenario Parameter Configuration",id:"3-scenario-parameter-configuration",level:3},{value:"4. User Parameters",id:"4-user-parameters",level:3},{value:"Parameter Types",id:"parameter-types",level:4},{value:"User Parameter Examples",id:"user-parameter-examples",level:4},{value:"5. User Parameter Configuration",id:"5-user-parameter-configuration",level:3},{value:"Parameter Configuration Example",id:"parameter-configuration-example",level:4},{value:"6. Save and Launch",id:"6-save-and-launch",level:3},{value:"What Happens on Launch",id:"what-happens-on-launch",level:2},{value:"Arguments and Parameters System",id:"arguments-and-parameters-system",level:2},{value:"Global ARGS Variable",id:"global-args-variable",level:3},{value:"Functions for Working with Arguments",id:"functions-for-working-with-arguments",level:3},{value:"getArgNumber(name, defaultValue?, required?)",id:"getargnumbername-defaultvalue-required",level:4},{value:"getArgString(name, defaultValue?, required?)",id:"getargstringname-defaultvalue-required",level:4},{value:"getArgBoolean(name, defaultValue?, required?)",id:"getargbooleanname-defaultvalue-required",level:4},{value:"Required Parameters",id:"required-parameters",level:3},{value:"Tester Parameters (only in testing mode)",id:"tester-parameters-only-in-testing-mode",level:3},{value:"Argument Usage Example",id:"argument-usage-example",level:3},{value:"Script Class in Strategy File",id:"script-class-in-strategy-file",level:2},{value:"Script Class Structure",id:"script-class-structure",level:3},{value:"Best Practices for Working with Parameters",id:"best-practices-for-working-with-parameters",level:2},{value:"Parameter Validation",id:"parameter-validation",level:3},{value:"Using Default Values",id:"using-default-values",level:3},{value:"Required Parameters",id:"required-parameters-1",level:3},{value:"Parameter Logging",id:"parameter-logging",level:3},{value:"Error Handling",id:"error-handling",level:3}];function d(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"script-launch",children:"Script Launch"})}),"\n",(0,i.jsx)(r.p,{children:"To launch a trading script in JT-Trader, you need to create a scenario (runtime) that will launch the Script class defined in the strategy file."}),"\n",(0,i.jsx)(r.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"In JT-Trader"})," you create a scenario (runtime) with settings"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Scenario"})," points to a file with Script class"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"On launch"})," JT-Trader executes the Script class from the specified file"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Script class"})," inherits from BaseScript and contains trading strategy logic"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"creating-a-scenario-in-jt-trader",children:"Creating a Scenario in JT-Trader"}),"\n",(0,i.jsx)(r.h3,{id:"1-navigate-to-runtime-tab",children:"1. Navigate to Runtime Tab"}),"\n",(0,i.jsx)(r.p,{children:"In the JT-Trader interface, go to the Runtime tab, where all running and stopped trading scripts are displayed."}),"\n",(0,i.jsx)(r.h3,{id:"2-creating-a-new-scenario",children:"2. Creating a New Scenario"}),"\n",(0,i.jsxs)(r.p,{children:["Click the ",(0,i.jsx)(r.strong,{children:"Create Runtime"})," button to create a new script launch scenario."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"Create Runtime Screenshot",src:n(847).A+"",width:"3074",height:"2256"})}),"\n",(0,i.jsx)(r.h3,{id:"3-scenario-parameter-configuration",children:"3. Scenario Parameter Configuration"}),"\n",(0,i.jsx)(r.p,{children:"When creating a scenario, you must specify the following required parameters:"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Main parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Name"})," - Scenario name for identification"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Script"})," - Trading script file"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Connection parameters:"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Connection"})," - Select exchange connection from the list of available connections"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Symbols"})," - List of trading pairs, comma-separated (e.g.: ",(0,i.jsx)(r.code,{children:"BTC/USDT:USDT,ETH/USDT:USDT,ADA/USDT:USDT"}),")"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"4-user-parameters",children:"4. User Parameters"}),"\n",(0,i.jsxs)(r.p,{children:["In the ",(0,i.jsx)(r.strong,{children:"Parameters"})," section, you can add user parameters that will be passed to the script. These parameters are configured by the script developer and may include buy/sell prices, trading volumes, stop-loss settings, and other strategy parameters."]}),"\n",(0,i.jsx)(r.h4,{id:"parameter-types",children:"Parameter Types"}),"\n",(0,i.jsx)(r.p,{children:"JT-Trader supports three parameter types:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"String"})," - string values (e.g., names, descriptions)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Number"})," - numeric values (prices, volumes, percentages)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Boolean"})," - logical values (enable/disable functions)"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"user-parameter-examples",children:"User Parameter Examples"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:'// Strategy parameters\r\nbuyPrice: 50000          // Buy price\r\nsellPrice: 55000         // Sell price\r\nvolume: 0.001           // Trading volume\r\nstopLoss: 45000         // Stop loss\r\ntakeProfit: 60000       // Take profit\r\nisDebug: true           // Debug mode\r\nstrategyName: "SMA"     // Strategy name\r\nleverage: 10            // Leverage for futures\n'})}),"\n",(0,i.jsx)(r.h3,{id:"5-user-parameter-configuration",children:"5. User Parameter Configuration"}),"\n",(0,i.jsxs)(r.p,{children:["In the ",(0,i.jsx)(r.strong,{children:"Parameters"})," section, add parameters that will be passed to the script. Each parameter must have:"]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Name"})," - parameter name (must match the name in script code)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Type"})," - parameter type (String, Number, Boolean)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Value"})," - parameter value"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Description"})," - parameter description (optional)"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"parameter-configuration-example",children:"Parameter Configuration Example"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Name"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Value"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"buyPrice"}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"50000"}),(0,i.jsx)(r.td,{children:"Buy price"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"sellPrice"}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"55000"}),(0,i.jsx)(r.td,{children:"Sell price"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"volume"}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"0.001"}),(0,i.jsx)(r.td,{children:"Trading volume"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"stopLoss"}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"45000"}),(0,i.jsx)(r.td,{children:"Stop loss"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"takeProfit"}),(0,i.jsx)(r.td,{children:"Number"}),(0,i.jsx)(r.td,{children:"60000"}),(0,i.jsx)(r.td,{children:"Take profit"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"isDebug"}),(0,i.jsx)(r.td,{children:"Boolean"}),(0,i.jsx)(r.td,{children:"true"}),(0,i.jsx)(r.td,{children:"Debug mode"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"strategyName"}),(0,i.jsx)(r.td,{children:"String"}),(0,i.jsx)(r.td,{children:'"SMA Strategy"'}),(0,i.jsx)(r.td,{children:"Strategy name"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"6-save-and-launch",children:"6. Save and Launch"}),"\n",(0,i.jsxs)(r.p,{children:["After configuring all parameters, click the ",(0,i.jsx)(r.strong,{children:"Save"})," button to save the scenario, then click the ",(0,i.jsx)(r.strong,{children:"Run"})," button to launch the script. When launching, all specified connection parameters will be passed to the script, as well as user parameters if they were added."]}),"\n",(0,i.jsx)(r.h2,{id:"what-happens-on-launch",children:"What Happens on Launch"}),"\n",(0,i.jsxs)(r.p,{children:["After clicking the ",(0,i.jsx)(r.strong,{children:"Run"})," button, JT-Trader performs the following actions:"]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Connects to exchange"})," - Establishes WebSocket connection with selected exchange"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Subscribes to events"})," - Subscribes to the following events:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Balance changes"})," - Getting account status updates"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Quote arrivals"})," - Getting new ticks for specified symbols"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Position changes"})," - Tracking open positions"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Order changes"})," - Monitoring status of all orders"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Loads file"})," - Reads the specified file"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Finds Script class"})," - Searches for the class and creates it in the environment"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Creates instance"})," - Creates an object of this class"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Passes parameters"})," - Passes all scenario settings to the script"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Starts execution"})," - Begins execution of lifecycle methods"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"arguments-and-parameters-system",children:"Arguments and Parameters System"}),"\n",(0,i.jsx)(r.h3,{id:"global-args-variable",children:"Global ARGS Variable"}),"\n",(0,i.jsxs)(r.p,{children:["When launching a script, JT-Trader automatically creates a global variable ",(0,i.jsx)(r.code,{children:"ARGS"})," that contains all parameters passed when creating the scenario. This variable is accessible in all parts of the code through special functions."]}),"\n",(0,i.jsx)(r.h3,{id:"functions-for-working-with-arguments",children:"Functions for Working with Arguments"}),"\n",(0,i.jsxs)(r.p,{children:["JT-Trader provides a set of functions for safely extracting parameters from the global variable ",(0,i.jsx)(r.code,{children:"ARGS"}),":"]}),"\n",(0,i.jsx)(r.h4,{id:"getargnumbername-defaultvalue-required",children:"getArgNumber(name, defaultValue?, required?)"}),"\n",(0,i.jsx)(r.p,{children:"Safely extracts a numeric argument with type checking:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const buyPrice = getArgNumber('buyPrice', 50000);        // With default value\r\nconst volume = getArgNumber('volume', undefined, true);  // Required parameter\n"})}),"\n",(0,i.jsx)(r.h4,{id:"getargstringname-defaultvalue-required",children:"getArgString(name, defaultValue?, required?)"}),"\n",(0,i.jsx)(r.p,{children:"Safely extracts a string argument:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const strategyName = getArgString('strategyName', 'DefaultStrategy');\r\nconst connectionName = getArgString('connectionName', undefined, true);\n"})}),"\n",(0,i.jsx)(r.h4,{id:"getargbooleanname-defaultvalue-required",children:"getArgBoolean(name, defaultValue?, required?)"}),"\n",(0,i.jsx)(r.p,{children:"Safely extracts a boolean argument:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"const isDebug = getArgBoolean('isDebug', false);\r\nconst enableLogging = getArgBoolean('enableLogging', true);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,i.jsx)(r.p,{children:"JT-Trader automatically passes the following required parameters:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"connectionName"})," - exchange connection name"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"symbols"})," - list of trading pairs (comma-separated string)"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"symbol"})," - first symbol from the list (for compatibility)"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"tester-parameters-only-in-testing-mode",children:"Tester Parameters (only in testing mode)"}),"\n",(0,i.jsx)(r.p,{children:"When running in testing mode, the following are additionally available:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"start"}),' - testing start date (e.g.: "2021-01")']}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"end"}),' - testing end date (e.g.: "2021-12")']}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"timeframe"})," - timeframe for testing"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"balance"})," - initial balance"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"leverage"})," - leverage"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"makerFee"})," - maker fee"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"takerFee"})," - taker fee"]}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"argument-usage-example",children:"Argument Usage Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private buyPrice: number;\r\n  private sellPrice: number;\r\n  private volume: number;\r\n  private isDebug: boolean;\r\n  private strategyName: string;\r\n\r\n  async onInit() {\r\n    // Get required parameters\r\n    const connectionName = getArgString('connectionName', undefined, true);\r\n    const symbols = getArgString('symbols', undefined, true);\r\n    \r\n    // Get user parameters\r\n    this.buyPrice = getArgNumber('buyPrice', 50000);\r\n    this.sellPrice = getArgNumber('sellPrice', 55000);\r\n    this.volume = getArgNumber('volume', 0.001);\r\n    this.isDebug = getArgBoolean('isDebug', false);\r\n    this.strategyName = getArgString('strategyName', 'DefaultStrategy');\r\n    \r\n    // Logging received parameters\r\n    log('Script', 'Strategy parameters', {\r\n      connectionName,\r\n      symbols,\r\n      buyPrice: this.buyPrice,\r\n      sellPrice: this.sellPrice,\r\n      volume: this.volume,\r\n      isDebug: this.isDebug,\r\n      strategyName: this.strategyName\r\n    }, true);\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"script-class-in-strategy-file",children:"Script Class in Strategy File"}),"\n",(0,i.jsx)(r.p,{children:"The strategy file must define a Script class that inherits from BaseScript. This class contains all the trading strategy logic."}),"\n",(0,i.jsx)(r.h3,{id:"script-class-structure",children:"Script Class Structure"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  // Strategy parameters\r\n  private buyPrice: number;\r\n  private sellPrice: number;\r\n  private volume: number;\r\n  private stopLoss: number;\r\n  private takeProfit: number;\r\n  private isDebug: boolean;\r\n  private strategyName: string;\r\n\r\n  // Strategy initialization\r\n  async onInit() {\r\n    // Get required parameters\r\n    const connectionName = getArgString('connectionName', undefined, true);\r\n    const symbols = getArgString('symbols', undefined, true);\r\n    \r\n    // Get user parameters\r\n    this.buyPrice = getArgNumber('buyPrice', 50000);\r\n    this.sellPrice = getArgNumber('sellPrice', 55000);\r\n    this.volume = getArgNumber('volume', 0.001);\r\n    this.stopLoss = getArgNumber('stopLoss', 45000);\r\n    this.takeProfit = getArgNumber('takeProfit', 60000);\r\n    this.isDebug = getArgBoolean('isDebug', false);\r\n    this.strategyName = getArgString('strategyName', 'SimpleStrategy');\r\n    \r\n    // Parameter logging\r\n    log('Script', 'Strategy initialized', {\r\n      strategyName: this.strategyName,\r\n      connectionName,\r\n      symbols,\r\n      buyPrice: this.buyPrice,\r\n      sellPrice: this.sellPrice,\r\n      volume: this.volume,\r\n      stopLoss: this.stopLoss,\r\n      takeProfit: this.takeProfit,\r\n      isDebug: this.isDebug\r\n    }, true);\r\n  }\r\n\r\n  // Handle new ticks (only for first symbol)\r\n  async onTick(data: Tick) {\r\n    const currentPrice = data.close;\r\n    \r\n    // Trading strategy logic\r\n    if (currentPrice <= this.buyPrice) {\r\n      await this.buyMarket(this.volume);\r\n      log('TradingStrategy', 'Bought at price', { \r\n        currentPrice, \r\n        volume: this.volume,\r\n        stopLoss: this.stopLoss,\r\n        takeProfit: this.takeProfit\r\n      }, this.isDebug);\r\n    }\r\n    \r\n    if (currentPrice >= this.sellPrice) {\r\n      await this.sellMarket(this.volume);\r\n      log('TradingStrategy', 'Sold at price', { \r\n        currentPrice, \r\n        volume: this.volume \r\n      }, this.isDebug);\r\n    }\r\n  }\r\n\r\n  // Handle order changes\r\n  async onOrderChange(order: Order) {\r\n    log('OrderManager', 'Order status changed', { \r\n      orderId: order.id, \r\n      status: order.status,\r\n      symbol: order.symbol,\r\n      side: order.side\r\n    }, this.isDebug);\r\n  }\r\n\r\n  // Work completion\r\n  async onStop() {\r\n    log('Script', 'Strategy stopped', {\r\n      strategyName: this.strategyName\r\n    }, true);\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices-for-working-with-parameters",children:"Best Practices for Working with Parameters"}),"\n",(0,i.jsx)(r.h3,{id:"parameter-validation",children:"Parameter Validation"}),"\n",(0,i.jsx)(r.p,{children:"Always check the correctness of received parameters:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"async onInit() {\r\n  // Numeric parameter validation\r\n  this.buyPrice = getArgNumber('buyPrice', 50000);\r\n  if (this.buyPrice <= 0) {\r\n    throw new Error('Buy price must be greater than 0');\r\n  }\r\n  \r\n  // Volume validation\r\n  this.volume = getArgNumber('volume', 0.001);\r\n  if (this.volume <= 0 || this.volume > 1) {\r\n    throw new Error('Volume must be from 0 to 1');\r\n  }\r\n  \r\n  // Boolean parameter validation\r\n  this.isDebug = getArgBoolean('isDebug', false);\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"using-default-values",children:"Using Default Values"}),"\n",(0,i.jsx)(r.p,{children:"Always specify reasonable default values for all parameters:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Good - has default value\r\nconst buyPrice = getArgNumber('buyPrice', 50000);\r\n\r\n// Bad - may cause error\r\nconst buyPrice = getArgNumber('buyPrice'); // undefined if parameter not passed\n"})}),"\n",(0,i.jsx)(r.h3,{id:"required-parameters-1",children:"Required Parameters"}),"\n",(0,i.jsxs)(r.p,{children:["Use the ",(0,i.jsx)(r.code,{children:"required: true"})," flag only for critically important parameters:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Required parameters\r\nconst connectionName = getArgString('connectionName', undefined, true);\r\nconst symbols = getArgString('symbols', undefined, true);\r\n\r\n// User parameters with default values\r\nconst buyPrice = getArgNumber('buyPrice', 50000);\r\nconst volume = getArgNumber('volume', 0.001);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"parameter-logging",children:"Parameter Logging"}),"\n",(0,i.jsx)(r.p,{children:"Always log received parameters for debugging:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"async onInit() {\r\n  // Get all parameters\r\n  const params = {\r\n    buyPrice: getArgNumber('buyPrice', 50000),\r\n    sellPrice: getArgNumber('sellPrice', 55000),\r\n    volume: getArgNumber('volume', 0.001),\r\n    isDebug: getArgBoolean('isDebug', false)\r\n  };\r\n  \r\n  // Logging for debugging\r\n  log('Script', 'Strategy parameters', params, true);\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(r.p,{children:"Handle parameter retrieval errors:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"try {\r\n  this.buyPrice = getArgNumber('buyPrice', 50000);\r\n} catch (error) {\r\n  log('Script', 'Error getting buyPrice parameter', { error: error.message }, true);\r\n  this.buyPrice = 50000; // Use default value\r\n}\n"})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>l});var t=n(6540);const i={},s=t.createContext(i);function a(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);