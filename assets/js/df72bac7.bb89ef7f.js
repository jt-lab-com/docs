"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[59],{1367:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"jt-lib/market-data-candles","title":"Market Data (Candles)","description":"JT-LIB provides a powerful system for working with market data, including historical candle retrieval, data buffering, and market analysis. The system is built around CandlesBuffer for efficient data management and getHistory for historical data retrieval.","source":"@site/docs/jt-lib/market-data-candles.md","sourceDirName":"jt-lib","slug":"/jt-lib/market-data-candles","permalink":"/docs/docs/jt-lib/market-data-candles","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/market-data-candles.md","tags":[],"version":"current","frontMatter":{"id":"market-data-candles","title":"Market Data (Candles)","sidebar_label":"Market Data"},"sidebar":"tutorialSidebar","previous":{"title":"Triggers System","permalink":"/docs/docs/jt-lib/triggers-system"},"next":{"title":"Technical Indicators","permalink":"/docs/docs/jt-lib/technical-indicators"}}');var s=n(4848),a=n(8453);const i={id:"market-data-candles",title:"Market Data (Candles)",sidebar_label:"Market Data"},l="Market Data (Candles)",c={},d=[{value:"Getting Candles - Historical Data",id:"getting-candles---historical-data",level:2},{value:"getHistory Function",id:"gethistory-function",level:3},{value:"Usage Examples",id:"usage-examples",level:3},{value:"Candle Data Format",id:"candle-data-format",level:3},{value:"CandlesBuffer - Data Buffering",id:"candlesbuffer---data-buffering",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Getting Buffer Through Global Service",id:"getting-buffer-through-global-service",level:3},{value:"CandlesBufferOptions Parameters",id:"candlesbufferoptions-parameters",level:3},{value:"How Caching Works",id:"how-caching-works",level:3},{value:"CandlesBuffer Methods",id:"candlesbuffer-methods",level:3},{value:"Time Intervals - Working with Timeframes",id:"time-intervals---working-with-timeframes",level:2},{value:"Supported Timeframes",id:"supported-timeframes",level:3},{value:"Timeframe Conversion",id:"timeframe-conversion",level:3},{value:"Time Rounding by Timeframe",id:"time-rounding-by-timeframe",level:3},{value:"Market Data Processing - How to Analyze Market",id:"market-data-processing---how-to-analyze-market",level:2},{value:"CandlesBufferService - Global Buffer Management",id:"candlesbufferservice---global-buffer-management",level:3},{value:"Integration with Indicators",id:"integration-with-indicators",level:3},{value:"Practical Analysis Examples",id:"practical-analysis-examples",level:3},{value:"Simple Trend Analysis",id:"simple-trend-analysis",level:4},{value:"Volatility Analysis",id:"volatility-analysis",level:4},{value:"Support and Resistance",id:"support-and-resistance",level:4},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Buffer Size Management",id:"buffer-size-management",level:4},{value:"Automatic Buffer Caching",id:"automatic-buffer-caching",level:4},{value:"Integration with Other Components",id:"integration-with-other-components",level:2},{value:"BaseScript + CandlesBuffer",id:"basescript--candlesbuffer",level:3},{value:"OrdersBasket + Market Data",id:"ordersbasket--market-data",level:3},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"market-data-candles",children:"Market Data (Candles)"})}),"\n",(0,s.jsxs)(r.p,{children:["JT-LIB provides a powerful system for working with market data, including historical candle retrieval, data buffering, and market analysis. The system is built around ",(0,s.jsx)(r.code,{children:"CandlesBuffer"})," for efficient data management and ",(0,s.jsx)(r.code,{children:"getHistory"})," for historical data retrieval."]}),"\n",(0,s.jsx)(r.h2,{id:"getting-candles---historical-data",children:"Getting Candles - Historical Data"}),"\n",(0,s.jsx)(r.h3,{id:"gethistory-function",children:"getHistory Function"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"getHistory"})})," is the main function for retrieving historical candle data."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"getHistory(symbol: string, timeframe: TimeFrame, startTime: number, limit?: number): Promise<OHLC[]>\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"symbol"})," \u2014 trading symbol (e.g., 'BTC/USDT')"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"timeframe"})," \u2014 candle timeframe ('1m', '5m', '15m', '1h', '4h', '1d', '1w', '1M')"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"startTime"})," \u2014 start time in milliseconds"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"limit"})," \u2014 number of candles (default: maximum available)"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Returns:"})," Array of candles in format ",(0,s.jsx)(r.code,{children:"[timestamp, open, high, low, close, volume]"})]}),"\n",(0,s.jsx)(r.h3,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Get last 100 candles for 1 hour\r\nconst timeFrom = tms() - 1000 * 60 * 60 * 24 * 7; // 7 days ago\r\nconst candles = await getHistory('BTC/USDT', '1h', timeFrom, 100);\r\n\r\n// Get daily candles for last month\r\nconst monthAgo = Date.now() - 30 * 24 * 60 * 60 * 1000;\r\nconst dailyCandles = await getHistory('ETH/USDT', '1d', monthAgo, 30);\r\n\r\n// Get minute candles for analysis\r\nconst minuteCandles = await getHistory('BTC/USDT', '1m', Date.now() - 60 * 60 * 1000, 60);\n"})}),"\n",(0,s.jsx)(r.h3,{id:"candle-data-format",children:"Candle Data Format"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Each candle is represented as an array:\r\ntype OHLC = [number, number, number, number, number, number];\r\n// [timestamp, open, high, low, close, volume]\r\n\r\n// Example:\r\nconst candle = [1614556800000, 50000, 51000, 49000, 50500, 1000];\r\n// timestamp: 1614556800000 (candle open time)\r\n// open: 50000 (open price)\r\n// high: 51000 (maximum price)\r\n// low: 49000 (minimum price)\r\n// close: 50500 (close price)\r\n// volume: 1000 (trading volume)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"candlesbuffer---data-buffering",children:"CandlesBuffer - Data Buffering"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"CandlesBuffer"})})," is a class for efficient candle buffer management with automatic updates. In JT-LIB, buffers are managed through the global ",(0,s.jsx)(r.code,{children:"CandlesBufferService"}),", which prevents creating duplicate buffers for the same symbol and timeframe combinations."]}),"\n",(0,s.jsx)(r.h3,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Global Caching"})," \u2014 one buffer per symbol+timeframe combination"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Automatic Updates"})," \u2014 subscription to ",(0,s.jsx)(r.code,{children:"onTick"})," events for data updates"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Data Preloading"})," \u2014 automatic historical data loading on initialization"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Buffer Size Management"})," \u2014 limiting maximum buffer size"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"OHLC Data Access"})," \u2014 methods for getting open, high, low, close, volume"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"getting-buffer-through-global-service",children:"Getting Buffer Through Global Service"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Get buffer through global service (recommended way)\r\nconst buffer = await globals.candlesBufferService.getBuffer({\r\n  symbol: 'BTC/USDT',\r\n  timeframe: '1h',\r\n  preloadCandlesCount: 250, // number of candles to preload\r\n  maxBufferLength: 1000     // maximum buffer size\r\n});\r\n\r\n// Buffer is automatically initialized and cached\r\n// On repeated request with same parameters, existing buffer is returned\n"})}),"\n",(0,s.jsx)(r.h3,{id:"candlesbufferoptions-parameters",children:"CandlesBufferOptions Parameters"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"interface CandlesBufferOptions {\r\n  symbol: string;                    // trading symbol\r\n  timeframe: string | number;        // timeframe\r\n  preloadCandlesCount?: number;      // number of candles to preload (default: 250)\r\n  maxBufferLength?: number;          // maximum buffer size (default: 1000)\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"how-caching-works",children:"How Caching Works"}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"CandlesBufferService"})," creates a unique key for each buffer: ",(0,s.jsx)(r.code,{children:"${symbol}-${timeframe}"}),". On first request, a new buffer is created; on repeated requests with the same parameters, the existing buffer is returned."]}),"\n",(0,s.jsx)(r.h3,{id:"candlesbuffer-methods",children:"CandlesBuffer Methods"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Get all candles\r\nconst candles = buffer.getCandles();\r\n\r\n// Get specific candle (shift = 0 - last candle)\r\nconst lastCandle = buffer.getCandle(0);\r\nconst prevCandle = buffer.getCandle(1);\r\n\r\n// Get OHLC data of last candle\r\nconst close = buffer.close();\r\nconst high = buffer.high();\r\nconst low = buffer.low();\r\nconst open = buffer.open();\r\nconst volume = buffer.volume();\r\nconst timestamp = buffer.tms();\r\n\r\n// Clear buffer\r\nbuffer.clear();\r\n\r\n// Get last update time\r\nconst lastUpdate = buffer.getLastTimeUpdated();\n"})}),"\n",(0,s.jsx)(r.h2,{id:"time-intervals---working-with-timeframes",children:"Time Intervals - Working with Timeframes"}),"\n",(0,s.jsx)(r.h3,{id:"supported-timeframes",children:"Supported Timeframes"}),"\n",(0,s.jsx)(r.p,{children:"JT-LIB supports the following timeframes:"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Timeframe"}),(0,s.jsx)(r.th,{children:"Minutes"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'1m'"})}),(0,s.jsx)(r.td,{children:"1"}),(0,s.jsx)(r.td,{children:"1 minute"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'5m'"})}),(0,s.jsx)(r.td,{children:"5"}),(0,s.jsx)(r.td,{children:"5 minutes"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'15m'"})}),(0,s.jsx)(r.td,{children:"15"}),(0,s.jsx)(r.td,{children:"15 minutes"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'1h'"})}),(0,s.jsx)(r.td,{children:"60"}),(0,s.jsx)(r.td,{children:"1 hour"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'4h'"})}),(0,s.jsx)(r.td,{children:"240"}),(0,s.jsx)(r.td,{children:"4 hours"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'1d'"})}),(0,s.jsx)(r.td,{children:"1440"}),(0,s.jsx)(r.td,{children:"1 day"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'1w'"})}),(0,s.jsx)(r.td,{children:"10080"}),(0,s.jsx)(r.td,{children:"1 week"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"'1M'"})}),(0,s.jsx)(r.td,{children:"43200"}),(0,s.jsx)(r.td,{children:"1 month"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"timeframe-conversion",children:"Timeframe Conversion"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { convertTimeframeToString, convertTimeframeToNumber } from 'jt-lib';\r\n\r\n// Convert to string\r\nconst tfString = convertTimeframeToString(60); // '1h'\r\nconst tfString2 = convertTimeframeToString('m60'); // '1h'\r\n\r\n// Convert to number (minutes)\r\nconst tfNumber = convertTimeframeToNumber('1h'); // 60\r\nconst tfNumber2 = convertTimeframeToNumber('1d'); // 1440\n"})}),"\n",(0,s.jsx)(r.h3,{id:"time-rounding-by-timeframe",children:"Time Rounding by Timeframe"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { roundTimeByTimeframe } from 'jt-lib';\r\n\r\nconst timestamp = Date.now();\r\nconst roundedTime = roundTimeByTimeframe(timestamp, '1h');\r\n// Rounds time to start of hour\n"})}),"\n",(0,s.jsx)(r.h2,{id:"market-data-processing---how-to-analyze-market",children:"Market Data Processing - How to Analyze Market"}),"\n",(0,s.jsx)(r.h3,{id:"candlesbufferservice---global-buffer-management",children:"CandlesBufferService - Global Buffer Management"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"CandlesBufferService"})})," is a global service for managing candle buffers. The service is automatically created in ",(0,s.jsx)(r.code,{children:"BaseScript"})," and accessible through ",(0,s.jsx)(r.code,{children:"globals.candlesBufferService"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Get buffer through global service\r\nconst buffer = await globals.candlesBufferService.getBuffer({\r\n  symbol: 'BTC/USDT',\r\n  timeframe: '1h',\r\n  preloadCandlesCount: 500\r\n});\r\n\r\n// Service automatically manages buffer caching\r\n// Buffers are created by key: `${symbol}-${timeframe}`\r\n// On repeated request with same parameters, existing buffer is returned\n"})}),"\n",(0,s.jsx)(r.h3,{id:"integration-with-indicators",children:"Integration with Indicators"}),"\n",(0,s.jsx)(r.p,{children:"CandlesBuffer integrates with the indicator system:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"import { BaseIndicator } from 'jt-lib';\r\n\r\nclass MyIndicator extends BaseIndicator {\r\n  constructor(symbol: string, timeframe: TimeFrame, buffer: CandlesBuffer) {\r\n    super(symbol, timeframe, buffer);\r\n  }\r\n\r\n  calculate() {\r\n    const candles = this.candlesBuffer.getCandles();\r\n    // Indicator calculation logic\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"practical-analysis-examples",children:"Practical Analysis Examples"}),"\n",(0,s.jsx)(r.h4,{id:"simple-trend-analysis",children:"Simple Trend Analysis"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private buffer: CandlesBuffer;\r\n\r\n  async onInit() {\r\n    // Get buffer through global service\r\n    this.buffer = await globals.candlesBufferService.getBuffer({\r\n      symbol: this.symbols[0],\r\n      timeframe: '1h',\r\n      preloadCandlesCount: 100\r\n    });\r\n  }\r\n\r\n  async onTick() {\r\n    const candles = this.buffer.getCandles();\r\n    \r\n    if (candles.length < 20) return;\r\n\r\n    // Trend analysis on last 20 candles\r\n    const recentCandles = candles.slice(-20);\r\n    const avgHigh = recentCandles.reduce((sum, c) => sum + c.high, 0) / 20;\r\n    const avgLow = recentCandles.reduce((sum, c) => sum + c.low, 0) / 20;\r\n    \r\n    const currentPrice = this.buffer.close();\r\n    \r\n    if (currentPrice > avgHigh) {\r\n      log('TrendAnalysis', 'Uptrend', { currentPrice, avgHigh, avgLow }, true);\r\n    } else if (currentPrice < avgLow) {\r\n      log('TrendAnalysis', 'Downtrend', { currentPrice, avgHigh, avgLow }, true);\r\n    } else {\r\n      log('TrendAnalysis', 'Sideways movement', { currentPrice, avgHigh, avgLow }, true);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h4,{id:"volatility-analysis",children:"Volatility Analysis"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private buffer: CandlesBuffer;\r\n\r\n  async onInit() {\r\n    // Get buffer through global service\r\n    this.buffer = await globals.candlesBufferService.getBuffer({\r\n      symbol: this.symbols[0],\r\n      timeframe: '4h',\r\n      preloadCandlesCount: 50\r\n    });\r\n  }\r\n\r\n  async onTick() {\r\n    const candles = this.buffer.getCandles();\r\n    \r\n    if (candles.length < 10) return;\r\n\r\n    // Volatility calculation\r\n    const recentCandles = candles.slice(-10);\r\n    const volatilities = recentCandles.map(candle => \r\n      (candle.high - candle.low) / candle.close\r\n    );\r\n    \r\n    const avgVolatility = volatilities.reduce((sum, v) => sum + v, 0) / 10;\r\n    \r\n    log('VolatilityAnalysis', `Average volatility: ${(avgVolatility * 100).toFixed(2)}%`, { avgVolatility }, true);\r\n    \r\n    if (avgVolatility > 0.05) {\r\n      log('VolatilityAnalysis', 'High volatility', { avgVolatility }, true);\r\n    } else if (avgVolatility < 0.02) {\r\n      log('VolatilityAnalysis', 'Low volatility', { avgVolatility }, true);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h4,{id:"support-and-resistance",children:"Support and Resistance"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private buffer: CandlesBuffer;\r\n\r\n  async onInit() {\r\n    // Get buffer through global service\r\n    this.buffer = await globals.candlesBufferService.getBuffer({\r\n      symbol: this.symbols[0],\r\n      timeframe: '1d',\r\n      preloadCandlesCount: 100\r\n    });\r\n  }\r\n\r\n  async onTick() {\r\n    const candles = this.buffer.getCandles();\r\n    \r\n    if (candles.length < 50) return;\r\n\r\n    // Find support and resistance levels\r\n    const highs = candles.map(c => c.high);\r\n    const lows = candles.map(c => c.low);\r\n    \r\n    const resistance = Math.max(...highs.slice(-20));\r\n    const support = Math.min(...lows.slice(-20));\r\n    \r\n    const currentPrice = this.buffer.close();\r\n    \r\n    log('SupportResistance', `Support: ${support}, Resistance: ${resistance}`, { support, resistance, currentPrice }, true);\r\n    \r\n    if (currentPrice > resistance * 0.99) {\r\n      log('SupportResistance', 'Resistance breakout', { currentPrice, resistance }, true);\r\n    } else if (currentPrice < support * 1.01) {\r\n      log('SupportResistance', 'Support breakout', { currentPrice, support }, true);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(r.h4,{id:"buffer-size-management",children:"Buffer Size Management"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// For long-term analysis use large buffers\r\nconst longTermBuffer = await globals.candlesBufferService.getBuffer({\r\n  symbol: 'BTC/USDT',\r\n  timeframe: '1d',\r\n  preloadCandlesCount: 1000,\r\n  maxBufferLength: 2000\r\n});\r\n\r\n// For short-term analysis - smaller buffers\r\nconst shortTermBuffer = await globals.candlesBufferService.getBuffer({\r\n  symbol: 'BTC/USDT',\r\n  timeframe: '1m',\r\n  preloadCandlesCount: 100,\r\n  maxBufferLength: 500\r\n});\n"})}),"\n",(0,s.jsx)(r.h4,{id:"automatic-buffer-caching",children:"Automatic Buffer Caching"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private hourlyBuffer: CandlesBuffer;\r\n  private dailyBuffer: CandlesBuffer;\r\n\r\n  async onInit() {\r\n    // Buffers are automatically cached through global service\r\n    // On repeated request with same parameters, existing buffer is returned\r\n    this.hourlyBuffer = await globals.candlesBufferService.getBuffer({\r\n      symbol: this.symbols[0],\r\n      timeframe: '1h'\r\n    });\r\n    \r\n    this.dailyBuffer = await globals.candlesBufferService.getBuffer({\r\n      symbol: this.symbols[0],\r\n      timeframe: '1d'\r\n    });\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"integration-with-other-components",children:"Integration with Other Components"}),"\n",(0,s.jsx)(r.h3,{id:"basescript--candlesbuffer",children:"BaseScript + CandlesBuffer"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private buffer: CandlesBuffer;\r\n\r\n  async onInit() {\r\n    // Get buffer through global service\r\n    this.buffer = await globals.candlesBufferService.getBuffer({\r\n      symbol: this.symbols[0],\r\n      timeframe: getArgString('timeframe', '1h'),\r\n      preloadCandlesCount: getArgNumber('candlesCount', 250)\r\n    });\r\n  }\r\n\r\n  async onTick() {\r\n    // Market data analysis\r\n    const trend = this.analyzeTrend();\r\n    const volatility = this.calculateVolatility();\r\n    \r\n    // Trading decisions based on analysis\r\n    if (trend === 'bullish' && volatility < 0.03) {\r\n      // Buy logic\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"ordersbasket--market-data",children:"OrdersBasket + Market Data"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private basket: OrdersBasket;\r\n  private buffer: CandlesBuffer;\r\n\r\n  async onInit() {\r\n    this.basket = new OrdersBasket({\r\n      symbol: this.symbols[0],\r\n      connectionName: this.connectionName\r\n    });\r\n    await this.basket.init();\r\n    \r\n    // Get buffer through global service\r\n    this.buffer = await globals.candlesBufferService.getBuffer({\r\n      symbol: this.symbols[0],\r\n      timeframe: '1h'\r\n    });\r\n  }\r\n\r\n  async onTick() {\r\n    const currentPrice = this.basket.close();\r\n    const bufferPrice = this.buffer.close();\r\n    \r\n    // Compare data from different sources\r\n    if (Math.abs(currentPrice - bufferPrice) > currentPrice * 0.001) {\r\n      warning('PriceValidation', 'Price discrepancy between sources', { currentPrice, bufferPrice, difference: Math.abs(currentPrice - bufferPrice) });\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/docs/jt-lib/trading-scripts",children:"Trading Scripts"})})," - Base class for trading scripts"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/docs/jt-lib/exchange-orders-basket",children:"Exchange Operations"})})," - OrdersBasket for trading operations"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/docs/jt-lib/events-system",children:"Event System"})})," - EventEmitter for event management"]}),"\n"]})]})}function f(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>l});var t=n(6540);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);