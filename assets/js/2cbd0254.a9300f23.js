"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[609],{3459:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"jt-lib/exchange-orders-basket","title":"Exchange Operations (OrdersBasket)","description":"OrdersBasket is a universal class for working with exchange orders, designed to simplify and automate trading. It combines functionality for creating, modifying, and canceling various types of orders, including market, limit, stop-loss, take-profit, and trigger orders.","source":"@site/docs/jt-lib/exchange-orders-basket.md","sourceDirName":"jt-lib","slug":"/jt-lib/exchange-orders-basket","permalink":"/docs/docs/jt-lib/exchange-orders-basket","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/exchange-orders-basket.md","tags":[],"version":"current","frontMatter":{"id":"exchange-orders-basket","title":"Exchange Operations (OrdersBasket)","sidebar_label":"Exchange Operations (OrdersBasket)"},"sidebar":"tutorialSidebar","previous":{"title":"Trading Scripts","permalink":"/docs/docs/jt-lib/trading-scripts"},"next":{"title":"Triggers System","permalink":"/docs/docs/jt-lib/triggers-system"}}');var t=r(4848),i=r(8453);const a={id:"exchange-orders-basket",title:"Exchange Operations (OrdersBasket)",sidebar_label:"Exchange Operations (OrdersBasket)"},o="Exchange Operations (OrdersBasket)",c={},l=[{value:"Key Features",id:"key-features",level:2},{value:"Events",id:"events",level:2},{value:"Exchange Connection",id:"exchange-connection",level:2},{value:"Constructor",id:"constructor",level:3},{value:"Default Values",id:"default-values",level:3},{value:"Initialization",id:"initialization",level:3},{value:"BaseScript Integration",id:"basescript-integration",level:3},{value:"How JT-Trader Launches Scripts",id:"how-jt-trader-launches-scripts",level:3},{value:"Calculations and Conversions",id:"calculations-and-conversions",level:2},{value:"Importance of Correct Calculations",id:"importance-of-correct-calculations",level:3},{value:"Contract Size (contractSize)",id:"contract-size-contractsize",level:3},{value:"Volume Conversion",id:"volume-conversion",level:3},{value:"Calculation Examples",id:"calculation-examples",level:3},{value:"Proper Usage in Trading",id:"proper-usage-in-trading",level:3},{value:"Trading Operations",id:"trading-operations",level:2},{value:"Order Creation",id:"order-creation",level:3},{value:"Market Orders",id:"market-orders",level:4},{value:"Limit Orders",id:"limit-orders",level:4},{value:"Universal Order Creation",id:"universal-order-creation",level:4},{value:"Order Management",id:"order-management",level:3},{value:"Cancel Order",id:"cancel-order",level:4},{value:"Modify Order",id:"modify-order",level:4},{value:"Cancel All Orders",id:"cancel-all-orders",level:4},{value:"Special Order Types",id:"special-order-types",level:3},{value:"Reduce-only Orders (position closing)",id:"reduce-only-orders-position-closing",level:4},{value:"Stop Loss Orders",id:"stop-loss-orders",level:4},{value:"Take Profit Orders",id:"take-profit-orders",level:4},{value:"Trigger Orders",id:"trigger-orders",level:4},{value:"Data Retrieval",id:"data-retrieval",level:2},{value:"Market Data",id:"market-data",level:3},{value:"Positions",id:"positions",level:3},{value:"Orders",id:"orders",level:3},{value:"Market Information",id:"market-information",level:3},{value:"Test Exchange",id:"test-exchange",level:2},{value:"Mock Exchange for Testing",id:"mock-exchange-for-testing",level:3},{value:"Testing Features",id:"testing-features",level:3},{value:"Strategy Testing Example",id:"strategy-testing-example",level:3},{value:"Trigger Management",id:"trigger-management",level:2},{value:"Trigger Types",id:"trigger-types",level:3},{value:"Script Triggers (default)",id:"script-triggers-default",level:4},{value:"Exchange Triggers",id:"exchange-triggers",level:4},{value:"Resource Cleanup",id:"resource-cleanup",level:2},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Grid Strategy",id:"grid-strategy",level:3},{value:"DCA Strategy",id:"dca-strategy",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"exchange-operations-ordersbasket",children:"Exchange Operations (OrdersBasket)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"OrdersBasket"})," is a universal class for working with exchange orders, designed to simplify and automate trading. It combines functionality for creating, modifying, and canceling various types of orders, including market, limit, stop-loss, take-profit, and trigger orders."]}),"\n",(0,t.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Order Creation and Management"})," \u2014 supports market, limit, reduce-only, stop-loss, and take-profit orders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trigger Orders"})," \u2014 ability to locally store and activate orders when specified price is reached"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Automatic Stop Management"})," \u2014 automatically cancels related stop orders (SL/TP) when one of them is executed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Hedge Mode"})," \u2014 supports opening positions in both directions simultaneously when hedge mode is enabled"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplified Trading Methods"})," \u2014 ",(0,t.jsx)(n.code,{children:"buyMarket"}),", ",(0,t.jsx)(n.code,{children:"sellMarket"}),", ",(0,t.jsx)(n.code,{children:"buyLimit"}),", ",(0,t.jsx)(n.code,{children:"sellLimit"})," functions with automatic SL/TP setup"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Volume Calculations"})," \u2014 converts USD amounts to contracts and vice versa"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Market Data Access"})," \u2014 getting bid/ask prices, volumes, high/low/open/close values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Order Modification and Cancellation"})," \u2014 changing price, size, and other parameters of existing orders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subscription Management"})," \u2014 unsubscribing from global events and canceling all active triggers"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"onOrderChange"})})," \u2014 called when order status changes (created, filled, canceled, modified)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"onPnlChange"})})," \u2014 called when unrealized or realized profit/loss changes for position"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"onTick"})})," \u2014 called when new market data tick arrives"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"exchange-connection",children:"Exchange Connection"}),"\n",(0,t.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const ordersBasket = new OrdersBasket({\n  symbol: 'ETH/USDT',\n  connectionName: 'binance',\n  hedgeMode: true,\n  prefix: 'myBot',\n  triggerType: 'script',\n  leverage: 10\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"symbol"})," \u2014 trading symbol (e.g., 'ETH/USDT') ",(0,t.jsx)(n.strong,{children:"[required]"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"connectionName"})," \u2014 exchange connection name (default taken from global arguments)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hedgeMode?"})," \u2014 determines if bidirectional position opening mode is enabled (default: ",(0,t.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"prefix?"})," \u2014 prefix for clientOrderId generation (default: random 4-character ID)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"triggerType?"})," \u2014 method for creating stop orders ('script' or 'exchange') (default: ",(0,t.jsx)(n.code,{children:"'script'"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"leverage?"})," \u2014 exchange leverage (default: ",(0,t.jsx)(n.code,{children:"1"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"default-values",children:"Default Values"}),"\n",(0,t.jsx)(n.p,{children:"OrdersBasket uses the following default values:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"hedgeMode"})}),": ",(0,t.jsx)(n.code,{children:"false"})," \u2014 normal trading mode (one position per symbol)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"prefix"})}),": random 4-character ID \u2014 unique prefix for all orders"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"triggerType"})}),": ",(0,t.jsx)(n.code,{children:"'script'"})," \u2014 stop orders managed locally"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"leverage"})}),": ",(0,t.jsx)(n.code,{children:"1"})," \u2014 no leverage (spot trading)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"connectionName"})}),": taken from global arguments \u2014 JT-Trader settings"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"await ordersBasket.init();\n"})}),"\n",(0,t.jsx)(n.p,{children:"After initialization, OrdersBasket is ready to work with the exchange."}),"\n",(0,t.jsx)(n.h3,{id:"basescript-integration",children:"BaseScript Integration"}),"\n",(0,t.jsxs)(n.p,{children:["OrdersBasket is typically used inside trading scripts that inherit from ",(0,t.jsx)(n.code,{children:"BaseScript"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  async onInit() {\n    // Create OrdersBasket for first symbol from list\n    this.basket = new OrdersBasket({\n      symbol: this.symbols[0], // first symbol from JT-Trader settings\n      connectionName: getArgString('connectionName'), // connection from global arguments\n      leverage: getArgNumber('leverage', 1),\n      hedgeMode: getArgBoolean('hedgeMode', false)\n    });\n    \n    await this.basket.init();\n  }\n\n  async onTick() {\n    // Use basket for trading\n    const price = this.basket.close();\n    // ... trading logic\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Important points:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"this.symbols[0]"})})," \u2014 first symbol from list passed to JT-Trader"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"getArgString('connectionName')"})})," \u2014 exchange connection name from global arguments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"JT-Trader"})," automatically passes all parameters through global variable ",(0,t.jsx)(n.code,{children:"ARGS"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"how-jt-trader-launches-scripts",children:"How JT-Trader Launches Scripts"}),"\n",(0,t.jsxs)(n.p,{children:["JT-Trader searches for a class inheriting from ",(0,t.jsx)(n.code,{children:"BaseScript"})," in the script file and launches it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// File: my-strategy.ts\nclass Script extends BaseScript {  // \u2190 JT-Trader looks for exactly this class\n  async onInit() {\n    this.basket = new OrdersBasket({\n      symbol: this.symbols[0], // symbols from Runtime/Tester settings\n      connectionName: getArgString('connectionName'), // connection from global arguments\n      leverage: getArgNumber('leverage', 1)\n    });\n    await this.basket.init();\n  }\n\n  async onTick() {\n    // Trading logic\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters from JT-Trader:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Runtime"}),' \u2014 parameters passed through "Create Runtime" interface']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Tester"}),' \u2014 parameters passed through "New Scenario" interface']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"All parameters"})," available through ",(0,t.jsx)(n.code,{children:"getArgString()"}),", ",(0,t.jsx)(n.code,{children:"getArgNumber()"}),", ",(0,t.jsx)(n.code,{children:"getArgBoolean()"})," functions"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"calculations-and-conversions",children:"Calculations and Conversions"}),"\n",(0,t.jsx)(n.h3,{id:"importance-of-correct-calculations",children:"Importance of Correct Calculations"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Critically important"})," to understand the difference between spot trading and futures trading:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spot trading"})," \u2014 uses coins (e.g., 0.1 BTC)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Futures trading"})," \u2014 uses contracts with contract size (contractSize)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"contract-size-contractsize",children:"Contract Size (contractSize)"}),"\n",(0,t.jsx)(n.p,{children:"Each futures symbol has its own contract size:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["BTC/USDT",":USDT"]})," \u2014 contractSize = 0.001 (1 contract = 0.001 BTC)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["ETH/USDT",":USDT"]})," \u2014 contractSize = 0.01 (1 contract = 0.01 ETH)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["XRP/USDT",":USDT"]})," \u2014 contractSize = 10 (1 contract = 10 XRP)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"volume-conversion",children:"Volume Conversion"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// USD to contracts\nconst contracts = ordersBasket.getContractsAmount(100, 2200); // 100 USD at price 2200\n// Result: number of contracts to buy for 100 USD\n\n// Contracts to USD  \nconst usdAmount = ordersBasket.getUsdAmount(1, 2200); // 1 contract at price 2200\n// Result: cost of 1 contract in USD\n"})}),"\n",(0,t.jsx)(n.h3,{id:"calculation-examples",children:"Calculation Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// For BTC/USDT:USDT (contractSize = 0.001, price = 50000)\nconst contracts = ordersBasket.getContractsAmount(100, 50000);\n// Result: 2 contracts (100 / 50000 / 0.001 = 2)\n\nconst usdValue = ordersBasket.getUsdAmount(2, 50000);  \n// Result: 100 USD (2 * 50000 * 0.001 = 100)\n\n// For XRP/USDT:USDT (contractSize = 10, price = 0.5)\nconst contracts = ordersBasket.getContractsAmount(100, 0.5);\n// Result: 20 contracts (100 / 0.5 / 10 = 20)\n\nconst usdValue = ordersBasket.getUsdAmount(20, 0.5);\n// Result: 100 USD (20 * 0.5 * 10 = 100)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"proper-usage-in-trading",children:"Proper Usage in Trading"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// \u274c INCORRECT - working with coins directly\nawait ordersBasket.buyMarket(0.1); // 0.1 of what? BTC or contracts?\n\n// \u2705 CORRECT - convert USD to contracts\nconst usdAmount = 100; // want to buy for 100 USD\nconst contracts = ordersBasket.getContractsAmount(usdAmount, ordersBasket.close());\nawait ordersBasket.buyMarket(contracts);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"trading-operations",children:"Trading Operations"}),"\n",(0,t.jsx)(n.h3,{id:"order-creation",children:"Order Creation"}),"\n",(0,t.jsx)(n.h4,{id:"market-orders",children:"Market Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Buy at market for 100 USD\nconst usdAmount = 100;\nconst contracts = ordersBasket.getContractsAmount(usdAmount, ordersBasket.close());\nconst buyOrder = await ordersBasket.buyMarket(contracts, 2150, 2300); // contracts, SL, TP\n\n// Sell at market for 50 USD\nconst sellContracts = ordersBasket.getContractsAmount(50, ordersBasket.close());\nconst sellOrder = await ordersBasket.sellMarket(sellContracts, 2300, 2150); // contracts, SL, TP\n"})}),"\n",(0,t.jsx)(n.h4,{id:"limit-orders",children:"Limit Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Buy at limit for 100 USD\nconst usdAmount = 100;\nconst contracts = ordersBasket.getContractsAmount(usdAmount, 2200);\nconst buyLimitOrder = await ordersBasket.buyLimit(contracts, 2200, 2150, 2300); // contracts, price, SL, TP\n\n// Sell at limit for 50 USD\nconst sellContracts = ordersBasket.getContractsAmount(50, 2200);\nconst sellLimitOrder = await ordersBasket.sellLimit(sellContracts, 2200, 2300, 2150); // contracts, price, SL, TP\n"})}),"\n",(0,t.jsx)(n.h4,{id:"universal-order-creation",children:"Universal Order Creation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Create any type of order for 100 USD\nconst usdAmount = 100;\nconst contracts = ordersBasket.getContractsAmount(usdAmount, ordersBasket.close());\nconst order = await ordersBasket.createOrder('market', 'buy', contracts, ordersBasket.close(), {\n  tp: 2300,  // Take Profit\n  sl: 2150   // Stop Loss\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"order-management",children:"Order Management"}),"\n",(0,t.jsx)(n.h4,{id:"cancel-order",children:"Cancel Order"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"await ordersBasket.cancelOrder(order.id);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"modify-order",children:"Modify Order"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const modifiedOrder = await ordersBasket.modifyOrder(\n  order.id, \n  'limit', \n  'buy', \n  1.5,    // new size\n  2250    // new price\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"cancel-all-orders",children:"Cancel All Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"await ordersBasket.cancelAllOrders();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"special-order-types",children:"Special Order Types"}),"\n",(0,t.jsx)(n.h4,{id:"reduce-only-orders-position-closing",children:"Reduce-only Orders (position closing)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Close long position for 50 USD\nconst closeAmount = 50;\nconst contracts = ordersBasket.getContractsAmount(closeAmount, ordersBasket.close());\nconst reduceOrder = await ordersBasket.createReduceOrder(\n  'market', \n  'long',  // close long position\n  contracts, // size in contracts\n  ordersBasket.close() // price\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"stop-loss-orders",children:"Stop Loss Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Stop Loss for position of 100 USD\nconst positionSize = 100;\nconst contracts = ordersBasket.getContractsAmount(positionSize, ordersBasket.close());\nconst slOrder = await ordersBasket.createStopLossOrder(\n  'buy',   // order side for closing\n  contracts, // size in contracts\n  2150     // trigger price\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"take-profit-orders",children:"Take Profit Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Take Profit for position of 100 USD\nconst positionSize = 100;\nconst contracts = ordersBasket.getContractsAmount(positionSize, ordersBasket.close());\nconst tpOrder = await ordersBasket.createTakeProfitOrder(\n  'buy',   // order side for closing\n  contracts, // size in contracts\n  2300     // trigger price\n);\n"})}),"\n",(0,t.jsx)(n.h4,{id:"trigger-orders",children:"Trigger Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Trigger order to buy for 100 USD when price reaches 2150\nconst usdAmount = 100;\nconst contracts = ordersBasket.getContractsAmount(usdAmount, 2200);\nconst triggeredOrder = await ordersBasket.createTriggeredOrder(\n  'market', \n  'buy', \n  contracts, // size in contracts\n  2200,     // order price\n  2150      // trigger price\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"data-retrieval",children:"Data Retrieval"}),"\n",(0,t.jsx)(n.h3,{id:"market-data",children:"Market Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Current prices\nconst currentPrice = ordersBasket.close();\nconst askPrice = ordersBasket.ask();\nconst bidPrice = ordersBasket.bid();\n\n// Volumes\nconst askVolume = ordersBasket.askVolume();\nconst bidVolume = ordersBasket.bidVolume();\n\n// OHLC data\nconst high = ordersBasket.high();\nconst low = ordersBasket.low();\nconst open = ordersBasket.open();\nconst volume = ordersBasket.volume();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"positions",children:"Positions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Get all positions\nconst positions = await ordersBasket.getPositions();\n\n// Get position by side\nconst longPosition = await ordersBasket.getPositionBySide('long');\nconst shortPosition = await ordersBasket.getPositionBySide('short');\n\n// Close position for 50 USD\nconst closeAmount = 50;\nconst contracts = ordersBasket.getContractsAmount(closeAmount, ordersBasket.close());\nawait ordersBasket.closePosition('long', contracts); // side, size in contracts\n"})}),"\n",(0,t.jsx)(n.h3,{id:"orders",children:"Orders"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Open orders\nconst openOrders = await ordersBasket.getOpenOrders();\n\n// Closed orders\nconst closedOrders = await ordersBasket.getClosedOrders();\n\n// All orders\nconst allOrders = await ordersBasket.getOrders();\n\n// Extended order information\nconst extendedOrders = ordersBasket.getExtendedOrders();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"market-information",children:"Market Information"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Brief market information\nconst marketInfo = await ordersBasket.marketInfoShort();\n// Returns: symbol, close, buyContracts, buySizeUsd, sellContracts, sellSizeUsd, leverage\n"})}),"\n",(0,t.jsx)(n.h2,{id:"test-exchange",children:"Test Exchange"}),"\n",(0,t.jsx)(n.h3,{id:"mock-exchange-for-testing",children:"Mock Exchange for Testing"}),"\n",(0,t.jsx)(n.p,{children:"OrdersBasket supports working with Mock exchange for strategy testing:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const testBasket = new OrdersBasket({\n  symbol: 'BTC/USDT',\n  connectionName: 'mock',  // Mock exchange\n  hedgeMode: false\n});\n\nawait testBasket.init();\n"})}),"\n",(0,t.jsx)(n.h3,{id:"testing-features",children:"Testing Features"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Execution Simulation"})," \u2014 orders are executed instantly at current price"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Position Emulation"})," \u2014 automatic position tracking"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Logging"})," \u2014 detailed logs of all operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Safety"})," \u2014 no real money is used"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"strategy-testing-example",children:"Strategy Testing Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  async onInit() {\n    this.basket = new OrdersBasket({\n      symbol: 'BTC/USDT',\n      connectionName: 'mock'\n    });\n    await this.basket.init();\n  }\n\n  async onTick() {\n    const price = this.basket.close();\n    \n    // Simple strategy: buy on decline, sell on rise\n    if (price < 50000) {\n      await this.basket.buyMarket(0.1, 49000, 52000);\n    } else if (price > 55000) {\n      await this.basket.sellMarket(0.1, 56000, 53000);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"trigger-management",children:"Trigger Management"}),"\n",(0,t.jsx)(n.h3,{id:"trigger-types",children:"Trigger Types"}),"\n",(0,t.jsx)(n.p,{children:"OrdersBasket supports two types of stop order management:"}),"\n",(0,t.jsx)(n.h4,{id:"script-triggers-default",children:"Script Triggers (default)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Stop orders stored locally"}),"\n",(0,t.jsx)(n.li,{children:"Activated when price is reached"}),"\n",(0,t.jsx)(n.li,{children:"More control and flexibility"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"exchange-triggers",children:"Exchange Triggers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Stop orders created immediately on exchange"}),"\n",(0,t.jsx)(n.li,{children:"Managed by exchange"}),"\n",(0,t.jsx)(n.li,{children:"Guaranteed execution when connected"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Script triggers (default)\nconst scriptBasket = new OrdersBasket({\n  symbol: 'ETH/USDT',\n  triggerType: 'script'\n});\n\n// Exchange triggers\nconst exchangeBasket = new OrdersBasket({\n  symbol: 'ETH/USDT', \n  triggerType: 'exchange'\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"resource-cleanup",children:"Resource Cleanup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// Unsubscribe from events and cancel triggers\nordersBasket.unsubscribe();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,t.jsx)(n.h3,{id:"grid-strategy",children:"Grid Strategy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  async onInit() {\n    this.basket = new OrdersBasket({\n      symbol: this.symbols[0], // first symbol from JT-Trader settings\n      connectionName: getArgString('connectionName'), // connection from global arguments\n      leverage: getArgNumber('leverage', 1)\n    });\n    await this.basket.init();\n    \n    this.gridStep = getArgNumber('gridStep', 100); // grid step from parameters\n    this.gridSize = getArgNumber('gridSize', 5);   // number of levels from parameters\n  }\n\n  async onTick() {\n    const price = this.basket.close();\n    const openOrders = await this.basket.getOpenOrders();\n    \n    // Create grid orders for 10 USD each\n    const orderSize = 10;\n    for (let i = 1; i <= this.gridSize; i++) {\n      const buyPrice = price - (this.gridStep * i);\n      const sellPrice = price + (this.gridStep * i);\n      \n      const buyContracts = this.basket.getContractsAmount(orderSize, buyPrice);\n      const sellContracts = this.basket.getContractsAmount(orderSize, sellPrice);\n      \n      await this.basket.buyLimit(buyContracts, buyPrice);\n      await this.basket.sellLimit(sellContracts, sellPrice);\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dca-strategy",children:"DCA Strategy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  async onInit() {\n    this.basket = new OrdersBasket({\n      symbol: this.symbols[0], // first symbol from JT-Trader settings\n      connectionName: getArgString('connectionName'), // connection from global arguments\n      leverage: getArgNumber('leverage', 1)\n    });\n    await this.basket.init();\n    \n    this.dcaLevels = getArgString('dcaLevels', '2000,1900,1800,1700').split(',').map(Number);\n    this.positionSize = getArgNumber('positionSize', 100); // position size in USD\n  }\n\n  async onTick() {\n    const price = this.basket.close();\n    const longPosition = await this.basket.getPositionBySide('long');\n    \n    // Buy at each DCA level\n    for (const level of this.dcaLevels) {\n      if (price <= level && longPosition.contracts === 0) {\n        const contracts = this.basket.getContractsAmount(this.positionSize, price);\n        await this.basket.buyMarket(contracts, level * 0.95, level * 1.1);\n        break;\n      }\n    }\n  }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"OrdersBasket provides a powerful and flexible tool for working with exchanges, combining all necessary functions for creating complex trading strategies."})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);