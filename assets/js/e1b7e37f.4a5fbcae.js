"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[483],{7778:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"jt-lib/reporting-system","title":"Reporting System","description":"The JT-Lib reporting system provides powerful tools for creating, displaying, and analyzing trading strategy results. Reports are displayed in the web interface and allow data visualization in various formats.","source":"@site/docs/jt-lib/reporting-system.md","sourceDirName":"jt-lib","slug":"/jt-lib/reporting-system","permalink":"/docs/docs/jt-lib/reporting-system","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/reporting-system.md","tags":[],"version":"current","frontMatter":{"id":"reporting-system","title":"Reporting System","sidebar_label":"Reporting System"},"sidebar":"tutorialSidebar","previous":{"title":"Technical Indicators","permalink":"/docs/docs/jt-lib/technical-indicators"},"next":{"title":"Introduction","permalink":"/docs/docs/jt-trader/getting-started"}}');var r=n(4848),i=n(8453);const s={id:"reporting-system",title:"Reporting System",sidebar_label:"Reporting System"},l="Reporting System",o={},d=[{value:"System Overview",id:"system-overview",level:2},{value:"Basic Operating Principles",id:"basic-operating-principles",level:3},{value:"Available Objects and Quick Start",id:"available-objects-and-quick-start",level:2},{value:"Global Report Object",id:"global-report-object",level:3},{value:"Quick Start",id:"quick-start",level:3},{value:"Main Reporting System Functions",id:"main-reporting-system-functions",level:2},{value:"cardSetValue",id:"cardsetvalue",level:3},{value:"tableUpdate",id:"tableupdate",level:3},{value:"chartAddPointAgg",id:"chartaddpointagg",level:3},{value:"chartAddPoint",id:"chartaddpoint",level:3},{value:"Widgets",id:"widgets",level:3},{value:"1. Cards",id:"1-cards",level:4},{value:"2. Tables",id:"2-tables",level:4},{value:"3. Charts",id:"3-charts",level:4},{value:"4. Text Blocks",id:"4-text-blocks",level:4},{value:"5. Action Buttons",id:"5-action-buttons",level:4},{value:"Data Types",id:"data-types",level:3},{value:"AggType (Aggregation Types)",id:"aggtype-aggregation-types",level:4},{value:"CardVariant (Card Types)",id:"cardvariant-card-types",level:4},{value:"ChartType (Chart Types)",id:"charttype-chart-types",level:4},{value:"Detailed Widget Description",id:"detailed-widget-description",level:2},{value:"1. Cards",id:"1-cards-1",level:3},{value:"Creating a Card",id:"creating-a-card",level:4},{value:"Card Types",id:"card-types",level:4},{value:"Display Formats",id:"display-formats",level:4},{value:"Data Aggregation",id:"data-aggregation",level:4},{value:"Card Options",id:"card-options",level:4},{value:"2. Tables",id:"2-tables-1",level:3},{value:"Creating a Table",id:"creating-a-table",level:4},{value:"Working with Data",id:"working-with-data",level:4},{value:"ReportTable Methods",id:"reporttable-methods",level:4},{value:"Table Limitations",id:"table-limitations",level:4},{value:"3. Charts",id:"3-charts-1",level:3},{value:"Creating a Chart",id:"creating-a-chart",level:4},{value:"Chart Types",id:"chart-types",level:4},{value:"Adding Data",id:"adding-data",level:4},{value:"ReportChart Methods",id:"reportchart-methods",level:4},{value:"Chart Data Aggregation",id:"chart-data-aggregation",level:4},{value:"Chart Options",id:"chart-options",level:4},{value:"4. Text Blocks",id:"4-text-blocks-1",level:3},{value:"Creating a Text Block",id:"creating-a-text-block",level:4},{value:"Display Variants",id:"display-variants",level:4},{value:"Alignment",id:"alignment",level:4},{value:"Text Options",id:"text-options",level:4},{value:"5. Action Buttons",id:"5-action-buttons-1",level:3},{value:"Creating an Action Button",id:"creating-an-action-button",level:4},{value:"Handling Actions",id:"handling-actions",level:4},{value:"Statistics and Analysis",id:"statistics-and-analysis",level:2},{value:"Automatic Statistics",id:"automatic-statistics",level:3},{value:"Creating Report with Statistics",id:"creating-report-with-statistics",level:3},{value:"Data Export",id:"data-export",level:2},{value:"Report Update",id:"report-update",level:3},{value:"Report Data Structure",id:"report-data-structure",level:3},{value:"Report Data Access",id:"report-data-access",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Example 1: Basic Trading Strategy Report",id:"example-1-basic-trading-strategy-report",level:3},{value:"Example 2: Optimization Report",id:"example-2-optimization-report",level:3},{value:"Example 3: Interactive Report",id:"example-3-interactive-report",level:3},{value:"Usage Recommendations",id:"usage-recommendations",level:2},{value:"Performance",id:"performance",level:3},{value:"Report Structure",id:"report-structure",level:3},{value:"Debugging",id:"debugging",level:3}];function c(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"reporting-system",children:"Reporting System"})}),"\n",(0,r.jsx)(t.p,{children:"The JT-Lib reporting system provides powerful tools for creating, displaying, and analyzing trading strategy results. Reports are displayed in the web interface and allow data visualization in various formats."}),"\n",(0,r.jsx)(t.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,r.jsx)(t.p,{children:"The reporting system includes:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Widgets"})," - various types of data display (cards, tables, charts, text)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Statistics"})," - automatic analysis of trading results"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Data Export"})," - saving results in various formats"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Interactivity"})," - action buttons for real-time strategy management"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"basic-operating-principles",children:"Basic Operating Principles"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["For the tester, the report should be updated in the ",(0,r.jsx)(t.code,{children:"onStop()"})," function after script completion"]}),"\n",(0,r.jsx)(t.li,{children:"For live trading, the report can be updated at time intervals (recommended no more than every 5 seconds)"}),"\n",(0,r.jsx)(t.li,{children:"All logs are automatically added to the report by default"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"available-objects-and-quick-start",children:"Available Objects and Quick Start"}),"\n",(0,r.jsx)(t.h3,{id:"global-report-object",children:"Global Report Object"}),"\n",(0,r.jsxs)(t.p,{children:["The reporting system provides a ready-to-use global object ",(0,r.jsx)(t.code,{children:"globals.report"}),", which is automatically initialized when starting a trading script. All widgets are created automatically on first access to the corresponding methods."]}),"\n",(0,r.jsx)(t.h3,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(t.p,{children:"The reporting system is ready to use immediately after starting a trading script. Below are examples of typical usage:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Report setup\nglobals.report.setTitle('Grid Bot Example');\nglobals.report.setDescription('Multi-coin grid strategy example. Strategy logic is based in the GridBasket class.');\n\n// Update cards (widgets are created automatically)\nglobals.report.cardSetValue('currentPrice', 50000);\nglobals.report.cardSetValue('profit', 1500, 'max');\nglobals.report.cardSetValue('totalOrders', 25);\n\n// Update tables (widgets are created automatically)\nglobals.report.tableUpdate('orders', {\n  id: 1,\n  symbol: 'BTC/USDT',\n  side: 'buy',\n  amount: 0.1,\n  price: 50000,\n  status: 'closed'\n});\n\n// Add data to charts (widgets are created automatically)\nglobals.report.chartAddPointAgg('profit', 'profit', 1500, 'max');\nglobals.report.chartAddPoint('balance', 'balance', Date.now(), 10000);\n\n// Update report\nawait globals.report.updateReport();\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Important"}),": No need to create widget instances manually. All widgets are created automatically on first call to the corresponding methods."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"main-reporting-system-functions",children:"Main Reporting System Functions"}),"\n",(0,r.jsx)(t.h3,{id:"cardsetvalue",children:"cardSetValue"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"cardSetValue"})," function automatically creates a card with the specified name and sets its value. The card is created on first call to the function if it doesn't exist yet."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"globals.report.cardSetValue(name: string, value: number|string, aggType?: AggType)\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"})," - unique card name"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"value"})," - value to display (number or string)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"aggType"})," - aggregation type (optional): 'last', 'min', 'max', 'sum', 'avg'"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"How it works:"})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["If a card with the specified name doesn't exist, a new card with ",(0,r.jsx)(t.code,{children:"Number"})," type is created by default"]}),"\n",(0,r.jsx)(t.li,{children:"Value is set according to the aggregation type"}),"\n",(0,r.jsx)(t.li,{children:"On subsequent calls, the value is updated with aggregation applied"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Usage examples:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Simple value update\nglobals.report.cardSetValue('currentPrice', 50000);\n\n// Update with aggregation - maximum value\nglobals.report.cardSetValue('maxProfit', 2000, 'max');\n\n// Update with aggregation - sum\nglobals.report.cardSetValue('totalVolume', 1000, 'sum');\n"})}),"\n",(0,r.jsx)(t.h3,{id:"tableupdate",children:"tableUpdate"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"tableUpdate"})," function automatically creates a table with the specified name and updates it with data. The table is created on first call to the function if it doesn't exist yet."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"globals.report.tableUpdate(name: string, data: TableRow|TableRow[])\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"})," - unique table name"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"data"})," - object with row data or array of objects for bulk update"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"How it works:"})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"If a table with the specified name doesn't exist, a new table is created"}),"\n",(0,r.jsxs)(t.li,{children:["If an object with an ",(0,r.jsx)(t.code,{children:"id"})," field is passed, the system tries to update an existing record"]}),"\n",(0,r.jsxs)(t.li,{children:["If a record with the specified ",(0,r.jsx)(t.code,{children:"id"})," is not found, a new record is created"]}),"\n",(0,r.jsx)(t.li,{children:"If an array of objects is passed, bulk update is performed"}),"\n",(0,r.jsx)(t.li,{children:"Old records are automatically removed when row limit is exceeded (300 by default)"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Usage examples:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Add new record\nglobals.report.tableUpdate('orders', {\n  id: 1,\n  symbol: 'BTC/USDT',\n  side: 'buy',\n  amount: 0.1,\n  price: 50000,\n  status: 'open'\n});\n\n// Update existing record\nglobals.report.tableUpdate('orders', {\n  id: 1,\n  status: 'closed',\n  profit: 500\n});\n\n// Bulk update\nglobals.report.tableUpdate('orders', [\n  { id: 1, symbol: 'BTC/USDT', side: 'buy', amount: 0.1, price: 50000 },\n  { id: 2, symbol: 'ETH/USDT', side: 'sell', amount: 1.0, price: 3000 }\n]);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"chartaddpointagg",children:"chartAddPointAgg"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"chartAddPointAgg"})," function automatically creates a chart with the specified name and adds a data point with aggregation. The chart is created on first call to the function if it doesn't exist yet."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"globals.report.chartAddPointAgg(name: string, lineName: string, value: number, aggType: AggType)\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"})," - unique chart name"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"lineName"})," - line name on the chart"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"value"})," - value to add"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"aggType"})," - aggregation type: 'last', 'min', 'max', 'sum', 'avg'"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"How it works:"})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["If a chart with the specified name doesn't exist, a new ",(0,r.jsx)(t.code,{children:"Line"})," type chart is created"]}),"\n",(0,r.jsx)(t.li,{children:"If a line with the specified name doesn't exist, a new line is created"}),"\n",(0,r.jsx)(t.li,{children:"Value is added with the specified aggregation applied"}),"\n",(0,r.jsx)(t.li,{children:"Old points are automatically removed when limit is exceeded (5000 by default)"}),"\n",(0,r.jsx)(t.li,{children:"Data is aggregated by time periods (1 day by default)"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Usage examples:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Add point with maximum value\nglobals.report.chartAddPointAgg('profitChart', 'profit', 1500, 'max');\n\n// Add point with minimum value\nglobals.report.chartAddPointAgg('drawdownChart', 'drawdown', -200, 'min');\n\n// Add point with average value\nglobals.report.chartAddPointAgg('balanceChart', 'balance', 10000, 'avg');\n"})}),"\n",(0,r.jsx)(t.h3,{id:"chartaddpoint",children:"chartAddPoint"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"chartAddPoint"})," function automatically creates a chart with the specified name and adds a data point with exact X and Y coordinates. The chart is created on first call to the function if it doesn't exist yet."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Syntax:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"globals.report.chartAddPoint(name: string, lineName: string, valueX: number, valueY: number)\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"name"})," - unique chart name"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"lineName"})," - line name on the chart"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"valueX"})," - X coordinate (usually time in milliseconds)"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"valueY"})," - Y coordinate (value to display)"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"How it works:"})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["If a chart with the specified name doesn't exist, a new ",(0,r.jsx)(t.code,{children:"Line"})," type chart is created"]}),"\n",(0,r.jsx)(t.li,{children:"If a line with the specified name doesn't exist, a new line is created"}),"\n",(0,r.jsx)(t.li,{children:"Point is added with exact coordinates without aggregation"}),"\n",(0,r.jsx)(t.li,{children:"Old points are automatically removed when limit is exceeded (5000 by default)"}),"\n",(0,r.jsx)(t.li,{children:"Data is displayed in original form without time aggregation"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Usage examples:"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Add point with current time\nglobals.report.chartAddPoint('balanceChart', 'balance', Date.now(), 10000);\n\n// Add point with specific time\nconst timestamp = new Date('2024-01-01T12:00:00Z').getTime();\nglobals.report.chartAddPoint('priceChart', 'price', timestamp, 50000);\n\n// Add point with custom X coordinate\nglobals.report.chartAddPoint('customChart', 'data', 100, 250);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"widgets",children:"Widgets"}),"\n",(0,r.jsx)(t.h4,{id:"1-cards",children:"1. Cards"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Automatic creation and value updates\nglobals.report.cardSetValue(name: string, value: number|string, aggType?: AggType)\n\n// Manual creation (optional)\nglobals.report.createCard(name: string, options: CardOptions)\nglobals.report.addCard(name: string, card: ReportCard)\n\n// Get existing widget\nglobals.report.getCardByName(name: string): ReportCard\n"})}),"\n",(0,r.jsx)(t.h4,{id:"2-tables",children:"2. Tables"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Automatic creation and data updates\nglobals.report.tableUpdate(name: string, data: TableRow|TableRow[])\n\n// Manual creation (optional)\nglobals.report.createTable(name: string, title: string)\nglobals.report.addTable(name: string, table: ReportTable)\n\n// Get existing widget\nglobals.report.getTableByName(name: string): ReportTable\n"})}),"\n",(0,r.jsx)(t.h4,{id:"3-charts",children:"3. Charts"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Automatic creation and data addition\nglobals.report.chartAddPointAgg(name: string, lineName: string, value: number, aggType: AggType)\nglobals.report.chartAddPointAggByDate(name: string, lineName: string, value: number, aggType: AggType)\nglobals.report.chartAddPoint(name: string, lineName: string, valueX: number, valueY: number)\n\n// Manual creation (optional)\nglobals.report.createChart(name: string, options: ChartOptions)\nglobals.report.addChart(name: string, chart: ReportChart)\n\n// Get existing widget\nglobals.report.getChartByName(name: string): ReportChart\n"})}),"\n",(0,r.jsx)(t.h4,{id:"4-text-blocks",children:"4. Text Blocks"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Automatic creation\nglobals.report.createText(name: string, text: string, variant: string, align: string)\n\n// Manual creation (optional)\nglobals.report.addText(name: string, text: ReportText)\n\n// Get existing widget\nglobals.report.getTextByName(name: string): ReportText\n"})}),"\n",(0,r.jsx)(t.h4,{id:"5-action-buttons",children:"5. Action Buttons"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Automatic creation\nglobals.report.createActionButton(title: string, action: string, value: string, callback?: Function, layoutIndex?: number)\n\n// Manual creation (optional)\nglobals.report.addActionButton(name: string, button: ReportActionButton)\n\n// Get existing widget\nglobals.report.getActionButtonByName(name: string): ReportActionButton\n"})}),"\n",(0,r.jsx)(t.h3,{id:"data-types",children:"Data Types"}),"\n",(0,r.jsx)(t.h4,{id:"aggtype-aggregation-types",children:"AggType (Aggregation Types)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"type AggType = 'last' | 'min' | 'max' | 'sum' | 'avg'\n"})}),"\n",(0,r.jsx)(t.h4,{id:"cardvariant-card-types",children:"CardVariant (Card Types)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"enum CardVariant {\n  Text = 'text',      // Text values\n  Number = 'number',  // Numeric values\n  Percent = 'percent' // Percentage values\n}\n"})}),"\n",(0,r.jsx)(t.h4,{id:"charttype-chart-types",children:"ChartType (Chart Types)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"enum ChartType {\n  Line = 'line',  // Line chart\n  Area = 'area'   // Area chart\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"detailed-widget-description",children:"Detailed Widget Description"}),"\n",(0,r.jsx)(t.h3,{id:"1-cards-1",children:"1. Cards"}),"\n",(0,r.jsx)(t.p,{children:"Cards display individual variable values in a convenient format."}),"\n",(0,r.jsx)(t.h4,{id:"creating-a-card",children:"Creating a Card"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Recommended way - automatic creation when updating value\nglobals.report.cardSetValue('profit', 1500, 'max');\n\n// Manual creation with settings (if customization is required)\nglobals.report.createCard('profit', {\n  title: 'Profit',\n  variant: CardVariant.Number,\n  options: {\n    format: CardNumberFormat.Currency,\n    currency: 'USD',\n    icon: 'chart-up'\n  }\n});\n\n// Create ReportCard instance (for advanced usage)\nconst profitCard = new ReportCard({\n  title: 'Profit',\n  variant: CardVariant.Number,\n  options: {\n    format: CardNumberFormat.Currency,\n    currency: 'USD'\n  }\n});\n\nglobals.report.addCard('profit', profitCard);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"card-types",children:"Card Types"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Text"})," - text values"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Number"})," - numeric values"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Percent"})," - percentage values"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"display-formats",children:"Display Formats"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Default"})," - standard display"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Currency"})," - currency format"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Date"})," - date format"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Short"})," - short format"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"data-aggregation",children:"Data Aggregation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Last value\nglobals.report.cardSetValue('profit', 1500, 'last');\n\n// Maximum value\nglobals.report.cardSetValue('maxProfit', 2000, 'max');\n\n// Minimum value\nglobals.report.cardSetValue('minProfit', -500, 'min');\n\n// Sum\nglobals.report.cardSetValue('totalVolume', 10000, 'sum');\n\n// Average value\nglobals.report.cardSetValue('avgProfit', 150, 'avg');\n"})}),"\n",(0,r.jsx)(t.h4,{id:"card-options",children:"Card Options"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"interface CardOptions {\n  format?: CardNumberFormat;  // Display format\n  currency?: string;          // Currency\n  icon?: string;             // Icon\n  caption?: string;          // Caption\n  isVisible?: boolean;       // Visibility\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"2-tables-1",children:"2. Tables"}),"\n",(0,r.jsx)(t.p,{children:"Tables display structured data in rows and columns."}),"\n",(0,r.jsx)(t.h4,{id:"creating-a-table",children:"Creating a Table"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Recommended way - automatic creation when updating data\nglobals.report.tableUpdate('orders', {\n  id: 1,\n  symbol: 'BTC/USDT',\n  side: 'buy',\n  amount: 0.1,\n  price: 50000,\n  status: 'closed'\n});\n\n// Manual creation with title (if customization is required)\nglobals.report.createTable('orders', 'Order History');\n\n// Create ReportTable instance (for advanced usage)\nconst ordersTable = new ReportTable('Order History');\nglobals.report.addTable('orders', ordersTable);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"working-with-data",children:"Working with Data"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Add record\nglobals.report.tableUpdate('orders', {\n  id: 1,\n  symbol: 'BTC/USDT',\n  side: 'buy',\n  amount: 0.1,\n  price: 50000,\n  status: 'closed',\n  profit: 500\n});\n\n// Update record\nglobals.report.tableUpdate('orders', {\n  id: 1,\n  status: 'closed',\n  profit: 750\n});\n\n// Bulk update\nconst orders = [\n  { id: 1, symbol: 'BTC/USDT', side: 'buy', amount: 0.1, price: 50000 },\n  { id: 2, symbol: 'ETH/USDT', side: 'sell', amount: 1.0, price: 3000 }\n];\nglobals.report.tableUpdate('orders', orders);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"reporttable-methods",children:"ReportTable Methods"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"const table = globals.report.getTableByName('orders');\n\n// Insert record\ntable.insert(row: TableRow, idField?: string): boolean\n\n// Update record\ntable.update(row: TableRow, idField?: string): boolean\n\n// Insert or update\ntable.upsert(row: TableRow, idField?: string): boolean\n\n// Bulk operations\ntable.insertRecords(rows: TableRow[], idField?: string)\ntable.updateRecords(rows: TableRow[], idField?: string)\ntable.upsertRecords(rows: TableRow[], idField?: string)\n\n// Clear table\ntable.clear(): boolean\n\n// Set row limit\ntable.setMaxRows(maxRows: number)\n"})}),"\n",(0,r.jsx)(t.h4,{id:"table-limitations",children:"Table Limitations"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Maximum 300 rows by default (configurable)"}),"\n",(0,r.jsx)(t.li,{children:"Automatic removal of old records when limit is exceeded"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"3-charts-1",children:"3. Charts"}),"\n",(0,r.jsx)(t.p,{children:"Charts visualize data as lines or areas."}),"\n",(0,r.jsx)(t.h4,{id:"creating-a-chart",children:"Creating a Chart"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Recommended way - automatic creation when adding data\nglobals.report.chartAddPointAgg('profitChart', 'profit', 1500, 'max');\n\n// Manual creation with settings (if customization is required)\nglobals.report.createChart('profitChart', {\n  chartType: ChartType.Line,\n  maxPoints: 1000,\n  aggPeriod: 3600000 // 1 hour\n});\n\n// Create ReportChart instance (for advanced usage)\nconst profitChart = new ReportChart('Profit Chart', {\n  chartType: ChartType.Area,\n  maxPoints: 5000\n});\nglobals.report.addChart('profitChart', profitChart);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"chart-types",children:"Chart Types"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Line"})," - line chart"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Area"})," - area chart"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"adding-data",children:"Adding Data"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Add point with aggregation\nglobals.report.chartAddPointAgg('profitChart', 'profit', 1500, 'max');\n\n// Add point by date\nglobals.report.chartAddPointAggByDate('profitChart', 'profit', 1500, 'max');\n\n// Configure lines\nconst chart = globals.report.getChartByName('profitChart');\nchart.setLineInfo('profit', 'max', '#3F51B5');\nchart.setLineInfo('drawdown', 'min', '#FD6A6A');\n"})}),"\n",(0,r.jsx)(t.h4,{id:"reportchart-methods",children:"ReportChart Methods"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"const chart = globals.report.getChartByName('profitChart');\n\n// Configure lines\nchart.setLineInfo(name: string, aggType: AggType, color?: string)\n\n// Add points\nchart.addPoint(lineName: string, valueX: number, valueY: number, color?: string)\nchart.addPointByDate(lineName: string, valueY: number, color?: string)\nchart.addPointAggByDate(lineName: string, value: number, aggType: AggType, color?: string)\n\n// Get data\nchart.getLine(name: string): number[]\nchart.getLength(): number\n\n// Clear\nchart.clear()\n\n// Configure aggregation\nchart.setAggPeriodByDates(start: number, end: number, dotCount: number)\n"})}),"\n",(0,r.jsx)(t.h4,{id:"chart-data-aggregation",children:"Chart Data Aggregation"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"last"})," - last value"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"max"})," - maximum value"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"min"})," - minimum value"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"sum"})," - sum of values"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"avg"})," - average value"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"chart-options",children:"Chart Options"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"interface ReportChartOptions {\n  maxPoints?: number;    // Maximum points (default 5000)\n  aggPeriod?: number;    // Aggregation period in ms (default 1 day)\n  chartType?: ChartType; // Chart type\n  layoutIndex?: number;  // Layout index\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"4-text-blocks-1",children:"4. Text Blocks"}),"\n",(0,r.jsx)(t.p,{children:"Text blocks display arbitrary text in the report."}),"\n",(0,r.jsx)(t.h4,{id:"creating-a-text-block",children:"Creating a Text Block"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Recommended way - direct creation\nglobals.report.createText('summary', 'Strategy Summary', 'subtitle1', 'center');\n\n// Create ReportText instance (for advanced usage)\nconst summaryText = new ReportText('Strategy Summary', 'subtitle1', 'center');\nglobals.report.addText('summary', summaryText);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"display-variants",children:"Display Variants"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"h1, h2, h3"})," - different level headings"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"subtitle1, subtitle2"})," - subtitles"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"body1, body2"})," - main text"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"caption"})," - small text"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"alignment",children:"Alignment"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"left"})," - left aligned"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"center"})," - center aligned"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"right"})," - right aligned"]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"text-options",children:"Text Options"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"interface TextOptions {\n  variant?: string;  // Display variant\n  align?: string;    // Alignment\n  isVisible?: boolean; // Visibility\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"5-action-buttons-1",children:"5. Action Buttons"}),"\n",(0,r.jsx)(t.p,{children:"Action buttons allow sending commands to the running runtime."}),"\n",(0,r.jsx)(t.h4,{id:"creating-an-action-button",children:"Creating an Action Button"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Recommended way - direct creation\nglobals.report.createActionButton('Close Position', 'closePosition', 'BTC/USDT');\n\n// Create with callback function\nglobals.report.createActionButton('Start Trading', 'startTrading', '', async (data) => {\n  this.isTrading = true;\n  await globals.report.updateReport();\n});\n\n// Create ReportActionButton instance (for advanced usage)\nconst closeButton = new ReportActionButton('Close Position', 'closePosition', 'BTC/USDT');\nglobals.report.addActionButton('closeButton', closeButton);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"handling-actions",children:"Handling Actions"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"async onReportAction(action: string, data: any) {\n  switch (action) {\n    case 'closePosition':\n      await this.closePosition(data);\n      break;\n    case 'startTrading':\n      this.isTrading = true;\n      break;\n    case 'stopTrading':\n      this.isTrading = false;\n      break;\n  }\n  \n  await globals.report.updateReport();\n}\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Note"}),": Action buttons are used only for real-time robots, not for the tester."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"statistics-and-analysis",children:"Statistics and Analysis"}),"\n",(0,r.jsx)(t.h3,{id:"automatic-statistics",children:"Automatic Statistics"}),"\n",(0,r.jsx)(t.p,{children:"The system automatically collects statistics on trading operations:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class Statistics extends BaseObject {\n  ordersOpenedCnt = 0;      // Number of opened orders\n  ordersClosedCnt = 0;      // Number of closed orders\n  ordersCanceledCnt = 0;    // Number of canceled orders\n  ordersModifiedCnt = 0;    // Number of modified orders\n  ordersTotalCnt = 0;       // Total number of orders\n  volume = 0;               // Total trading volume\n  profit = 0;               // Total profit\n  bestTrade = 0;            // Best trade\n  worstTrade = 0;           // Worst trade\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"creating-report-with-statistics",children:"Creating Report with Statistics"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"  async onStop() {\n    // Set values (cards are created automatically)\n    globals.report.cardSetValue('totalOrders', this.statistics.ordersTotalCnt);\n    globals.report.cardSetValue('profit', this.statistics.profit);\n    globals.report.cardSetValue('winRate', this.calculateWinRate());\n    \n    // Update report\n    await globals.report.updateReport();\n  }\n"})}),"\n",(0,r.jsx)(t.h2,{id:"data-export",children:"Data Export"}),"\n",(0,r.jsx)(t.h3,{id:"report-update",children:"Report Update"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Update report on server\nawait globals.report.updateReport();\n\n// Force update (ignores frequency limitations)\nawait globals.report.updateReport({ isForce: true });\n"})}),"\n",(0,r.jsx)(t.h3,{id:"report-data-structure",children:"Report Data Structure"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"interface ReportData {\n  id: string;           // Unique report identifier\n  symbol: string;       // Trading symbol\n  description?: string; // Report description\n  blocks: ReportBlock[]; // Report blocks\n}\n\ninterface ReportBlock {\n  type: ReportBlockType; // Block type\n  name?: string;         // Block name\n  data: ReportBlockData; // Block data\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"report-data-access",children:"Report Data Access"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"// Get report data\nconst reportData = globals.report.getReportData();\n\n// Export to JSON\nconst jsonData = JSON.stringify(reportData, null, 2);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,r.jsx)(t.h3,{id:"example-1-basic-trading-strategy-report",children:"Example 1: Basic Trading Strategy Report"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  async onInit() {\n    // Report setup\n    globals.report.setTitle('Trading Strategy Report');\n    globals.report.setDescription('Automated trading strategy with real-time monitoring');\n    \n    // Widgets are created automatically on first access\n    // No additional actions required\n  }\n  \n  async onTick() {\n    // Update cards (widgets are created automatically)\n    globals.report.cardSetValue('currentPrice', this.getCurrentPrice());\n    globals.report.cardSetValue('position', this.getPositionStatus());\n    \n    // Add point to chart (widget is created automatically)\n    globals.report.chartAddPointAggByDate('profit', 'profit', this.getTotalProfit(), 'max');\n    \n    // Update report every 5 ticks\n    if (this.tickCount % 5 === 0) {\n      await globals.report.updateReport();\n    }\n  }\n  \n  async onOrderChange(order: Order) {\n    // Add order to table (widget is created automatically)\n    globals.report.tableUpdate('orders', {\n      id: order.id,\n      symbol: order.symbol,\n      side: order.side,\n      amount: order.amount,\n      price: order.price,\n      status: order.status,\n      timestamp: new Date().toISOString()\n    });\n  }\n  \n  async onStop() {\n    // Final report update\n    await globals.report.updateReport();\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"example-2-optimization-report",children:"Example 2: Optimization Report"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  async onStop() {\n    // Add optimization parameters\n    globals.report.optimizedSetValue('profit', this.totalProfit, 'max');\n    globals.report.optimizedSetValue('drawdown', this.maxDrawdown, 'min');\n    globals.report.optimizedSetValue('winRate', this.winRate, 'avg');\n    globals.report.optimizedSetValue('sharpeRatio', this.sharpeRatio, 'max');\n    \n    // Create optimization results table\n    globals.report.createTable('optimization', 'Optimization Results');\n    globals.report.tableUpdate('optimization', {\n      parameter: 'RSI Period',\n      value: this.rsiPeriod,\n      profit: this.totalProfit,\n      drawdown: this.maxDrawdown,\n      winRate: this.winRate\n    });\n    \n    await globals.report.updateReport();\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h3,{id:"example-3-interactive-report",children:"Example 3: Interactive Report"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  async onInit() {\n    // Create control buttons\n    globals.report.createActionButton('Start Trading', 'startTrading', '');\n    globals.report.createActionButton('Stop Trading', 'stopTrading', '');\n    globals.report.createActionButton('Close All Positions', 'closeAll', '');\n    \n    // Information cards are created automatically when updating values\n  }\n  \n  async onReportAction(action: string, data: any) {\n    switch (action) {\n      case 'startTrading':\n        this.isTrading = true;\n        globals.report.cardSetValue('status', 'Trading Active');\n        break;\n        \n      case 'stopTrading':\n        this.isTrading = false;\n        globals.report.cardSetValue('status', 'Trading Stopped');\n        break;\n        \n      case 'closeAll':\n        await this.closeAllPositions();\n        globals.report.cardSetValue('status', 'All Positions Closed');\n        break;\n    }\n    \n    await globals.report.updateReport();\n  }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"usage-recommendations",children:"Usage Recommendations"}),"\n",(0,r.jsx)(t.h3,{id:"performance",children:"Performance"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Update Frequency"}),": Don't update report more than every 5 seconds in live trading"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Data Limits"}),": Use reasonable limits for tables and charts"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Aggregation"}),": Use aggregation for large data volumes"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"report-structure",children:"Report Structure"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Header"}),": Always set report title and description"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Logical Grouping"}),": Group related widgets together"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Information Priority"}),": Place most important information at the beginning of the report"]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"debugging",children:"Debugging"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Logging"}),": Use built-in logging for debugging"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Data Validation"}),": Check data correctness before adding to report"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Error Handling"}),": Handle errors when creating and updating widgets"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"The JT-Lib reporting system provides all necessary tools for creating informative and interactive trading strategy reports, allowing traders to effectively analyze results and make informed decisions."})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var a=n(6540);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);