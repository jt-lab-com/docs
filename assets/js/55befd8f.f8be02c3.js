"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[706],{2354:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"jt-lib/error-handling","title":"Error Handling","description":"The error handling system in JT-LIB is built around the BaseError class - an extended error class that provides detailed information about the context of error occurrence and automatically integrates with the logging system.","source":"@site/docs/jt-lib/error-handling.md","sourceDirName":"jt-lib","slug":"/jt-lib/error-handling","permalink":"/docs/docs/jt-lib/error-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/error-handling.md","tags":[],"version":"current","frontMatter":{"id":"error-handling","title":"Error Handling","sidebar_label":"Error Handling"},"sidebar":"tutorialSidebar","previous":{"title":"Core Fundamentals","permalink":"/docs/docs/jt-lib/core-fundamentals"},"next":{"title":"Event System","permalink":"/docs/docs/jt-lib/events-system"}}');var i=n(4848),a=n(8453);const s={id:"error-handling",title:"Error Handling",sidebar_label:"Error Handling"},o="Error Handling",d={},c=[{value:"BaseError - Extended Error Handling System",id:"baseerror---extended-error-handling-system",level:2},{value:"Key Features",id:"key-features",level:3},{value:"Key Properties",id:"key-properties",level:3},{value:"Constructors",id:"constructors",level:3},{value:"Methods",id:"methods",level:3},{value:"addContext(line: string, context?: any)",id:"addcontextline-string-context-any",level:4},{value:"Automatic System Integration",id:"automatic-system-integration",level:3},{value:"Debug Information",id:"debug-information",level:3},{value:"BaseObject Integration",id:"baseobject-integration",level:2},{value:"Practical Usage Examples",id:"practical-usage-examples",level:2},{value:"In Trading Strategies",id:"in-trading-strategies",level:3},{value:"In Indicator System",id:"in-indicator-system",level:3},{value:"In Order Management System",id:"in-order-management-system",level:3},{value:"Comparison with Regular Error",id:"comparison-with-regular-error",level:2},{value:"BaseError Advantages",id:"baseerror-advantages",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Always Add Context",id:"1-always-add-context",level:3},{value:"2. Use addContext for Information Accumulation",id:"2-use-addcontext-for-information-accumulation",level:3},{value:"3. Use BaseObject.error() for Automatic Processing",id:"3-use-baseobjecterror-for-automatic-processing",level:3},{value:"4. Handle Errors at Different Levels",id:"4-handle-errors-at-different-levels",level:3}];function l(r){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"error-handling",children:"Error Handling"})}),"\n",(0,i.jsxs)(e.p,{children:["The error handling system in JT-LIB is built around the ",(0,i.jsx)(e.strong,{children:"BaseError"})," class - an extended error class that provides detailed information about the context of error occurrence and automatically integrates with the logging system."]}),"\n",(0,i.jsx)(e.h2,{id:"baseerror---extended-error-handling-system",children:"BaseError - Extended Error Handling System"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"BaseError"})," is an extended error class that provides detailed information about the context of error occurrence and automatically integrates with the logging system."]}),"\n",(0,i.jsx)(e.h3,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Unique Identification"})," - each error gets a unique ID"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Multiple Context"})," - ability to add multiple contexts to one error"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Automatic Call Stack"})," - saving complete call stack"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Logging Integration"})," - automatic recording in logging system"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Debug Information"})," - detailed logging in debug mode"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"key-properties",children:"Key Properties"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"id: string"})})," - unique error identifier (2 characters)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"allContext: any[]"})})," - array of all contexts added to the error"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"internalStack: string[]"})})," - internal call stack"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"message: string"})})," - error message (inherited from Error)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"stack: string"})})," - call stack (inherited from Error)"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"BaseError"})," supports two creation methods:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// Creation from string message\r\nconst error1 = new BaseError('Exchange connection error', { \r\n  exchange: 'Binance', \r\n  timeout: 5000 \r\n});\r\n\r\n// Creation from existing error\r\nconst originalError = new Error('Network timeout');\r\nconst error2 = new BaseError(originalError, { \r\n  url: 'https://api.binance.com',\r\n  retryCount: 3 \r\n});\r\n\r\n// Creation from BaseError (copying)\r\nconst error3 = new BaseError(existingBaseError, additionalContext);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(e.h4,{id:"addcontextline-string-context-any",children:"addContext(line: string, context?: any)"}),"\n",(0,i.jsx)(e.p,{children:"Adds additional context to the error. Useful for accumulating information about system state at the time of error."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"const error = new BaseError('Order processing error', { orderId: '12345' });\r\n\r\n// Adding additional context\r\nerror.addContext('OrderManager::processOrder', { \r\n  symbol: 'BTC/USDT', \r\n  amount: 0.001 \r\n});\r\n\r\nerror.addContext('ExchangeAPI::placeOrder', { \r\n  response: 'timeout', \r\n  latency: 5000 \r\n});\n"})}),"\n",(0,i.jsx)(e.h3,{id:"automatic-system-integration",children:"Automatic System Integration"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"BaseError"})," automatically integrates with the logging system:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// In BaseObject.error()\r\nerror('OrderManager', 'Order creation error', { \r\n  symbol: 'BTC/USDT',\r\n  amount: 0.001 \r\n});\r\n\r\n// BaseError is automatically created and recorded in logs\r\n// In logs will appear:\r\n// {\r\n//   date: \"2024-01-15 10:30:45\",\r\n//   event: \"OrderManager\",\r\n//   msg: \"\ud83d\udeab Order creation error\",\r\n//   context: {\r\n//     stack: [...],\r\n//     allContext: [...],\r\n//     internalStack: [...]\r\n//   }\r\n// }\n"})}),"\n",(0,i.jsx)(e.h3,{id:"debug-information",children:"Debug Information"}),"\n",(0,i.jsxs)(e.p,{children:["In debug mode (",(0,i.jsx)(e.code,{children:"ARGS.isDebug = true"}),"), BaseError automatically saves additional information:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:'// In globals.userData.glAllContext is saved:\r\n[\r\n  {\r\n    time: "2024-01-15 10:30:45",\r\n    line: "OrderManager::createOrder (line 123)",\r\n    context: { orderId: "12345", symbol: "BTC/USDT" }\r\n  },\r\n  {\r\n    time: "2024-01-15 10:30:46", \r\n    line: "ExchangeAPI::placeOrder (line 456)",\r\n    context: { response: "timeout", latency: 5000 }\r\n  }\r\n]\n'})}),"\n",(0,i.jsx)(e.h2,{id:"baseobject-integration",children:"BaseObject Integration"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"BaseObject"})," automatically uses BaseError for error handling:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"class MyStrategy extends BaseObject {\r\n  async processOrder(order: Order) {\r\n    try {\r\n      // Order processing logic\r\n    } catch (e) {\r\n      // Automatic BaseError creation with object context\r\n      this.error(e, { \r\n        orderId: order.id,\r\n        symbol: order.symbol \r\n      });\r\n    }\r\n  }\r\n  \r\n  checkBalance() {\r\n    if (this.balance < 100) {\r\n      // Error creation with automatic object context\r\n      this.error('Insufficient funds', {\r\n        balance: this.balance,\r\n        required: 100,\r\n        objectId: this.id\r\n      });\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Automatic BaseObject.error() capabilities:"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"BaseError creation with unique ID"}),"\n",(0,i.jsx)(e.li,{children:"Automatic object ID addition to context"}),"\n",(0,i.jsxs)(e.li,{children:["Event formation in ",(0,i.jsx)(e.code,{children:"ClassName::methodName symbol"})," format"]}),"\n",(0,i.jsx)(e.li,{children:"Logging system integration"}),"\n",(0,i.jsxs)(e.li,{children:["Calling ",(0,i.jsx)(e.code,{children:"onError()"})," for additional processing"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"practical-usage-examples",children:"Practical Usage Examples"}),"\n",(0,i.jsx)(e.h3,{id:"in-trading-strategies",children:"In Trading Strategies"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"try {\r\n  await exchange.placeOrder(order);\r\n} catch (e) {\r\n  // Automatic BaseError creation with context\r\n  error(e, { \r\n    orderId: order.id,\r\n    symbol: order.symbol,\r\n    price: order.price,\r\n    amount: order.amount\r\n  });\r\n}\r\n\r\n// Or creating custom error\r\nif (balance < requiredAmount) {\r\n  const error = new BaseError('Insufficient funds', {\r\n    balance: balance,\r\n    required: requiredAmount,\r\n    symbol: symbol\r\n  });\r\n  \r\n  error.addContext('Strategy::checkBalance', { \r\n    strategyId: this.id,\r\n    timestamp: Date.now() \r\n  });\r\n  \r\n  throw error;\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"in-indicator-system",children:"In Indicator System"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"try {\r\n  const rsi = calculateRSI(prices);\r\n} catch (e) {\r\n  const error = new BaseError(e, {\r\n    indicator: 'RSI',\r\n    period: 14,\r\n    pricesLength: prices.length\r\n  });\r\n  \r\n  error.addContext('IndicatorService::calculateRSI', {\r\n    lastPrice: prices[prices.length - 1],\r\n    timeframe: '1h'\r\n  });\r\n  \r\n  throw error;\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"in-order-management-system",children:"In Order Management System"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"class OrderManager extends BaseObject {\r\n  async createOrder(orderData: OrderData) {\r\n    try {\r\n      // Data validation\r\n      this.validateOrderData(orderData);\r\n      \r\n      // Order creation\r\n      const order = await this.exchange.placeOrder(orderData);\r\n      \r\n      return order;\r\n    } catch (e) {\r\n      // BaseError creation with full context\r\n      const error = new BaseError(e, {\r\n        orderData: orderData,\r\n        exchange: this.exchange.name,\r\n        timestamp: Date.now()\r\n      });\r\n      \r\n      error.addContext('OrderManager::createOrder', {\r\n        managerId: this.id,\r\n        balance: this.balance\r\n      });\r\n      \r\n      // Logging and error propagation\r\n      this.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"comparison-with-regular-error",children:"Comparison with Regular Error"}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Capability"}),(0,i.jsx)(e.th,{children:"Error"}),(0,i.jsx)(e.th,{children:"BaseError"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Unique ID"}),(0,i.jsx)(e.td,{children:"\u274c"}),(0,i.jsx)(e.td,{children:"\u2705"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Multiple Context"}),(0,i.jsx)(e.td,{children:"\u274c"}),(0,i.jsx)(e.td,{children:"\u2705"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Automatic Logging"}),(0,i.jsx)(e.td,{children:"\u274c"}),(0,i.jsx)(e.td,{children:"\u2705"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"BaseObject Integration"}),(0,i.jsx)(e.td,{children:"\u274c"}),(0,i.jsx)(e.td,{children:"\u2705"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Debug Information"}),(0,i.jsx)(e.td,{children:"\u274c"}),(0,i.jsx)(e.td,{children:"\u2705"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Call Stack"}),(0,i.jsx)(e.td,{children:"\u2705"}),(0,i.jsx)(e.td,{children:"\u2705"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"Error Message"}),(0,i.jsx)(e.td,{children:"\u2705"}),(0,i.jsx)(e.td,{children:"\u2705"})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"baseerror-advantages",children:"BaseError Advantages"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Detailed Diagnostics"})," - complete information about system state"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Automatic Logging"})," - integration with logging system"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Unique Identification"})," - easy to find specific error"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Context Accumulation"})," - ability to add information at different levels"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Debug Support"})," - additional information in debug mode"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(e.h3,{id:"1-always-add-context",children:"1. Always Add Context"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// \u274c Bad\r\nthrow new Error('Connection error');\r\n\r\n// \u2705 Good\r\nconst error = new BaseError('Connection error', {\r\n  exchange: 'Binance',\r\n  endpoint: '/api/v3/account',\r\n  timeout: 5000,\r\n  retryCount: 3\r\n});\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-use-addcontext-for-information-accumulation",children:"2. Use addContext for Information Accumulation"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"const error = new BaseError('Order processing error', { orderId: '12345' });\r\n\r\n// Add context from different levels\r\nerror.addContext('Strategy::processSignal', { signal: 'BUY', confidence: 0.85 });\r\nerror.addContext('OrderManager::validateOrder', { balance: 1000, required: 100 });\r\nerror.addContext('ExchangeAPI::placeOrder', { response: 'timeout', latency: 5000 });\n"})}),"\n",(0,i.jsx)(e.h3,{id:"3-use-baseobjecterror-for-automatic-processing",children:"3. Use BaseObject.error() for Automatic Processing"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"class MyStrategy extends BaseObject {\r\n  async executeTrade() {\r\n    try {\r\n      // Trading logic\r\n    } catch (e) {\r\n      // Will automatically create BaseError with object context\r\n      this.error(e, { \r\n        tradeId: this.currentTrade?.id,\r\n        symbol: this.symbol \r\n      });\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,i.jsx)(e.h3,{id:"4-handle-errors-at-different-levels",children:"4. Handle Errors at Different Levels"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"// At strategy level\r\ntry {\r\n  await this.processMarketData(data);\r\n} catch (e) {\r\n  this.error(e, { \r\n    dataType: 'tick',\r\n    symbol: data.symbol,\r\n    price: data.price \r\n  });\r\n}\r\n\r\n// At component level\r\ntry {\r\n  await this.calculateIndicator(prices);\r\n} catch (e) {\r\n  const error = new BaseError(e, {\r\n    indicator: 'RSI',\r\n    period: 14,\r\n    pricesCount: prices.length\r\n  });\r\n  \r\n  error.addContext('IndicatorService::calculate', {\r\n    lastPrice: prices[prices.length - 1],\r\n    timeframe: '1h'\r\n  });\r\n  \r\n  throw error;\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"BaseError makes debugging trading strategies significantly easier, providing all necessary information for quick problem identification and resolution."})]})}function h(r={}){const{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,i.jsx)(e,{...r,children:(0,i.jsx)(l,{...r})}):l(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>s,x:()=>o});var t=n(6540);const i={},a=t.createContext(i);function s(r){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function o(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:s(r.components),t.createElement(a.Provider,{value:e},r.children)}}}]);