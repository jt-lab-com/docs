"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[140],{1157:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"jt-lib/trading-scripts","title":"Trading Scripts (Script)","description":"Trading scripts are the foundation for creating trading strategies in jt-lib. They provide a structured approach to developing algorithmic trading systems with a clear lifecycle and market event handling.","source":"@site/docs/jt-lib/trading-scripts.md","sourceDirName":"jt-lib","slug":"/jt-lib/trading-scripts","permalink":"/docs/docs/jt-lib/trading-scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/trading-scripts.md","tags":[],"version":"current","frontMatter":{"id":"trading-scripts","title":"Trading Scripts (Script)","sidebar_label":"Trading Scripts"},"sidebar":"tutorialSidebar","previous":{"title":"Event System","permalink":"/docs/docs/jt-lib/events-system"},"next":{"title":"Exchange Operations (OrdersBasket)","permalink":"/docs/docs/jt-lib/exchange-orders-basket"}}');var s=n(4848),i=n(8453);const a={id:"trading-scripts",title:"Trading Scripts (Script)",sidebar_label:"Trading Scripts"},o="Trading Scripts (Script)",l={},c=[{value:"Your First Trading Script - DCA Strategy",id:"your-first-trading-script---dca-strategy",level:2},{value:"DCA Strategy Workflow",id:"dca-strategy-workflow",level:3},{value:"BaseScript - Base Class for Trading Strategies",id:"basescript---base-class-for-trading-strategies",level:2},{value:"Main Properties",id:"main-properties",level:3},{value:"Global Services Initialization",id:"global-services-initialization",level:3},{value:"Script Lifecycle",id:"script-lifecycle",level:2},{value:"1. Constructor",id:"1-constructor",level:3},{value:"2. onInit()",id:"2-oninit",level:3},{value:"3. onTick()",id:"3-ontick",level:3},{value:"4. onOrderChange()",id:"4-onorderchange",level:3},{value:"5. onStop()",id:"5-onstop",level:3},{value:"Tick Processing - Market Data Retrieval",id:"tick-processing---market-data-retrieval",level:2},{value:"Important Limitation",id:"important-limitation",level:3},{value:"Working with Multiple Symbols",id:"working-with-multiple-symbols",level:3},{value:"Operation Modes",id:"operation-modes",level:3},{value:"Native Functions for Market Data Retrieval",id:"native-functions-for-market-data-retrieval",level:3},{value:"Script Parameters - Strategy Configuration",id:"script-parameters---strategy-configuration",level:2},{value:"Global ARGS Variable",id:"global-args-variable",level:3},{value:"GlobalARGS Type",id:"globalargs-type",level:3},{value:"Launch Modes",id:"launch-modes",level:3},{value:"Required Parameters",id:"required-parameters",level:3},{value:"User Parameters",id:"user-parameters",level:3},{value:"Advanced Strategy Examples",id:"advanced-strategy-examples",level:2},{value:"1. Multi-Symbol Strategy with OrdersBasket",id:"1-multi-symbol-strategy-with-ordersbasket",level:3},{value:"2. Timer-Based Strategy",id:"2-timer-based-strategy",level:3},{value:"3. Order-Based Strategy",id:"3-order-based-strategy",level:3},{value:"Additional Methods",id:"additional-methods",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Parameter Updates",id:"parameter-updates",level:3},{value:"Exchange Event Handling",id:"exchange-event-handling",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"trading-scripts-script",children:"Trading Scripts (Script)"})}),"\n",(0,s.jsxs)(r.p,{children:["Trading scripts are the foundation for creating trading strategies in ",(0,s.jsx)(r.code,{children:"jt-lib"}),". They provide a structured approach to developing algorithmic trading systems with a clear lifecycle and market event handling."]}),"\n",(0,s.jsx)(r.h2,{id:"your-first-trading-script---dca-strategy",children:"Your First Trading Script - DCA Strategy"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"DCA (Dollar Cost Averaging)"})," is a strategy of regular purchases for a fixed amount regardless of price. This reduces the impact of volatility and allows gradual asset accumulation."]}),"\n",(0,s.jsxs)(r.p,{children:["Here's a concise DCA strategy example using modern ",(0,s.jsx)(r.code,{children:"jt-lib"})," capabilities:"]}),"\n",(0,s.jsx)(r.h3,{id:"dca-strategy-workflow",children:"DCA Strategy Workflow"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"DCA Script Launch\r\n    \u2193\r\nGet parameters: symbols, sizeUsd, intervalHours\r\n    \u2193\r\nInitialize global services (triggers, report, events)\r\n    \u2193\r\nonInit():\r\n    \u251c\u2500 Create StandardReportLayout\r\n    \u251c\u2500 Initialize OrdersBasket for symbol\r\n    \u251c\u2500 Register 'dcaPurchase' trigger\r\n    \u2514\u2500 Setup periodic purchases\r\n    \u2193\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502         Main Operation Loop            \u2502\r\n\u2502                                         \u2502\r\n\u2502  Every intervalHours hours:            \u2502\r\n\u2502  \u251c\u2500 'dcaPurchase' trigger fires         \u2502\r\n\u2502  \u251c\u2500 buyDCA() is called                 \u2502\r\n\u2502  \u251c\u2500 Contract calculation: sizeUsd \u2192 amount \u2502\r\n\u2502  \u251c\u2500 Purchase execution: buyMarket()     \u2502\r\n\u2502  \u2514\u2500 Result logging                     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n    \u2193\r\nonStop() - cancel all orders\r\n    \u2193\r\nWork completion\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  static definedArgs = [\r\n    { key: 'symbols', defaultValue: 'BTC/USDT:USDT' },\r\n    { key: 'sizeUsd', defaultValue: 100 },\r\n    { key: 'intervalHours', defaultValue: 168 },\r\n  ];\r\n\r\n  dcaBasket: OrdersBasket;\r\n  sizeUsd = getArgNumber('sizeUsd', 100);\r\n  intervalHours = getArgNumber('intervalHours', 168); // 168 hours = 1 week\r\n  private reportLayout: StandardReportLayout;\r\n\r\n  async onInit() {\r\n    // Initialize standard report\r\n    this.reportLayout = new StandardReportLayout();\r\n\r\n    // Create basket\r\n    this.dcaBasket = new OrdersBasket({\r\n      symbol: this.symbols[0],\r\n    });\r\n    await this.dcaBasket.init();\r\n\r\n    // Register purchase trigger\r\n    globals.triggers.registerTimeHandler('dcaPurchase', this.buyDCA, this);\r\n    \r\n    // Start regular purchases\r\n    globals.triggers.addTaskByTime({\r\n      name: 'dcaPurchase',\r\n      triggerTime: currentTime() + 60 * 1000, // In 1 minute\r\n      interval: this.intervalHours * 60 * 60 * 1000, // Repeat every intervalHours hours\r\n      canReStore: true,\r\n    });\r\n\r\n    globals.report.setTitle('DCA Bot');\r\n  }\r\n\r\n  // Purchase function\r\n  buyDCA = async () => {\r\n    const amount = this.dcaBasket.getContractsAmount(this.sizeUsd);\r\n    await this.dcaBasket.buyMarket(amount);\r\n    log('DCA purchase completed', `amount: ${amount}, price: ${this.dcaBasket.close()}`);\r\n  };\r\n}\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Key features of this example:"})}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"static definedArgs"})})," - automatic parameter generation in JT-Trader"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Modern triggers"})," - ",(0,s.jsx)(r.code,{children:"registerTimeHandler()"})," and ",(0,s.jsx)(r.code,{children:"addTaskByTime()"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Automatic restoration"})," - ",(0,s.jsx)(r.code,{children:"canReStore: true"})," for restart after failures"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Built-in reporting"})," - ",(0,s.jsx)(r.code,{children:"StandardReportLayout"})," for monitoring"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Simplified initialization"})," - OrdersBasket without extra parameters"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Concise code"})," - minimum lines, maximum functionality"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"basescript---base-class-for-trading-strategies",children:"BaseScript - Base Class for Trading Strategies"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"BaseScript"})," is the fundamental class from which all trading strategies inherit. It provides:"]}),"\n",(0,s.jsx)(r.h3,{id:"main-properties",children:"Main Properties"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"connectionName"})})," - exchange connection name (required parameter)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"symbols"})})," - array of trading pairs for strategy operation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"interval"})})," - timer interval in milliseconds (if set, uses ",(0,s.jsx)(r.code,{children:"onTimer"})," instead of ",(0,s.jsx)(r.code,{children:"onTick"}),")"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"hedgeMode"})})," - position hedging mode"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"isInitialized"})})," - script initialization flag"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"balanceTotal"})})," and ",(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.code,{children:"balanceFree"})})," - total and free account balance"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"global-services-initialization",children:"Global Services Initialization"}),"\n",(0,s.jsxs)(r.p,{children:["When creating a ",(0,s.jsx)(r.code,{children:"BaseScript"})," instance, all global services are automatically initialized:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Automatically created in BaseScript constructor\r\nglobals.script = this;\r\nglobals.events = new EventEmitter();\r\nglobals.triggers = new TriggerService();\r\nglobals.report = new Report();\r\nglobals.storage = new Storage();\r\nglobals.candlesBufferService = new CandlesBufferService();\r\nglobals.indicators = new Indicators();\r\n\r\n// OrdersBasket is created manually for each symbol\r\n// import { OrdersBasket } from 'jt-lib';\n"})}),"\n",(0,s.jsx)(r.h2,{id:"script-lifecycle",children:"Script Lifecycle"}),"\n",(0,s.jsx)(r.h3,{id:"1-constructor",children:"1. Constructor"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"constructor(args: GlobalARGS) {\r\n  // Get parameters from ARGS\r\n  this.connectionName = getArgString('connectionName', undefined, true);\r\n  this.hedgeMode = getArgBoolean('hedgeMode', false);\r\n  \r\n  // Define symbols for trading\r\n  if (isTester()) {\r\n    this.symbols.push(args.symbol);\r\n  } else {\r\n    // Parse symbols from parameter string\r\n    let symbolsLine = getArgString('symbols', '');\r\n    // ... symbol processing\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"2-oninit",children:"2. onInit()"}),"\n",(0,s.jsx)(r.p,{children:"Called after instance creation and balance retrieval. Here happens:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Trading component initialization"}),"\n",(0,s.jsx)(r.li,{children:"Indicator setup"}),"\n",(0,s.jsx)(r.li,{children:"Initial order creation"}),"\n",(0,s.jsx)(r.li,{children:"Event subscription"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"async onInit() {\r\n  // Initialize your strategy\r\n  log('Script', 'Strategy initialized', {}, true);\r\n  \r\n  // Get balance\r\n  log('Script', 'Total balance', { balanceTotal: this.balanceTotal }, true);\r\n  log('Script', 'Free balance', { balanceFree: this.balanceFree }, true);\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"3-ontick",children:"3. onTick()"}),"\n",(0,s.jsxs)(r.p,{children:["Called on each new tick (price change) ",(0,s.jsx)(r.strong,{children:"only for the first symbol"})," in the ",(0,s.jsx)(r.code,{children:"symbols"})," list. When working with multiple symbols, use ",(0,s.jsx)(r.code,{children:"EventEmitter"})," to subscribe to ticks of specific symbols."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Important:"})," The ",(0,s.jsx)(r.code,{children:"onTick()"})," method doesn't accept parameters. For market data retrieval, use native functions."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"async onTick() {\r\n  // Get market data through native functions\r\n  const currentPrice = close(); // Close price of first symbol\r\n  const askPrice = ask()[0];    // Buy price from order book\r\n  const bidPrice = bid()[0];    // Sell price from order book\r\n  const volume = volume();      // Trading volume\r\n  \r\n  // Trading strategy logic\r\n  trace('Script', 'New tick', { currentPrice, volume, askPrice, bidPrice }, true);\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"4-onorderchange",children:"4. onOrderChange()"}),"\n",(0,s.jsx)(r.p,{children:"Called when any order status changes:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"async onOrderChange(order: Order) {\r\n  log('OrderManager', 'Order status changed', { orderId: order.id, status: order.status }, true);\r\n  \r\n  if (order.status === 'filled') {\r\n    log('OrderManager', 'Order filled', { orderId: order.id, filled: order.filled, amount: order.amount }, true);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"5-onstop",children:"5. onStop()"}),"\n",(0,s.jsx)(r.p,{children:"Called when stopping the script for resource cleanup:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"async onStop() {\r\n  log('Script', 'Strategy stopped', {}, true);\r\n  // Close positions, cancel orders, etc.\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"tick-processing---market-data-retrieval",children:"Tick Processing - Market Data Retrieval"}),"\n",(0,s.jsx)(r.h3,{id:"important-limitation",children:"Important Limitation"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsxs)(r.strong,{children:[(0,s.jsx)(r.code,{children:"onTick()"})," works only with the first symbol!"]})}),"\n",(0,s.jsxs)(r.p,{children:["When running a script on multiple symbols (",(0,s.jsx)(r.code,{children:"symbols: ['BTC/USDT', 'ETH/USDT', 'ADA/USDT']"}),"), the ",(0,s.jsx)(r.code,{children:"onTick()"})," method will be called ",(0,s.jsx)(r.strong,{children:"only for the first symbol"})," (",(0,s.jsx)(r.code,{children:"BTC/USDT"}),")."]}),"\n",(0,s.jsx)(r.h3,{id:"working-with-multiple-symbols",children:"Working with Multiple Symbols"}),"\n",(0,s.jsxs)(r.p,{children:["To get ticks for all symbols, use ",(0,s.jsx)(r.code,{children:"EventEmitter"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"async onInit() {\r\n  // Subscribe to ticks for each symbol\r\n  for (const symbol of this.symbols) {\r\n    globals.events.subscribeOnTick(() => this.onSymbolTick(symbol), this, symbol, 1000);\r\n  }\r\n}\r\n\r\nasync onSymbolTick(symbol: string) {\r\n  // Process tick for specific symbol\r\n  const currentPrice = close(symbol); // Use native function with symbol\r\n  trace('MultiSymbol', 'Tick for symbol', { symbol, currentPrice }, true);\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"operation-modes",children:"Operation Modes"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Tick mode"})," (default):"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"onTick()"})," is called on each new tick of ",(0,s.jsx)(r.strong,{children:"first symbol"})]}),"\n",(0,s.jsxs)(r.li,{children:["For other symbols, use ",(0,s.jsx)(r.code,{children:"EventEmitter"})]}),"\n",(0,s.jsxs)(r.li,{children:["Use native functions ",(0,s.jsx)(r.code,{children:"close()"}),", ",(0,s.jsx)(r.code,{children:"ask()"}),", ",(0,s.jsx)(r.code,{children:"bid()"})," for data retrieval"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Timer mode"}),":"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["If ",(0,s.jsx)(r.code,{children:"interval"})," is set, uses ",(0,s.jsx)(r.code,{children:"onTimer()"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"onTick()"})," is not called"]}),"\n",(0,s.jsx)(r.li,{children:"Useful for scheduled strategies"}),"\n",(0,s.jsxs)(r.li,{children:["In ",(0,s.jsx)(r.code,{children:"onTimer()"})," also use native functions for data retrieval"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  interval = 60000; // 1 minute - switch to timer mode\r\n  \r\n  async onTimer() {\r\n    // Called every minute\r\n    const currentPrice = close(); // Use native function\r\n    const askPrice = ask()[0];\r\n    const bidPrice = bid()[0];\r\n    \r\n    log('TimerStrategy', 'Timer triggered', { currentPrice, askPrice, bidPrice }, true);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"native-functions-for-market-data-retrieval",children:"Native Functions for Market Data Retrieval"}),"\n",(0,s.jsx)(r.p,{children:"For market data retrieval, use native functions:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"// Main OHLC functions\r\nconst currentPrice = close();     // Close price (current price)\r\nconst openPrice = open();         // Open price\r\nconst highPrice = high();         // Maximum price\r\nconst lowPrice = low();           // Minimum price\r\nconst volume = volume();          // Trading volume\r\nconst timestamp = tms();          // Timestamp\r\n\r\n// Order book functions\r\nconst askData = ask();            // [price, volume] - buy price\r\nconst bidData = bid();            // [price, volume] - sell price\r\nconst askPrice = ask()[0];        // Only buy price\r\nconst bidPrice = bid()[0];        // Only sell price\r\n\r\n// For specific symbol (when working with multiple symbols)\r\nconst btcPrice = close('BTC/USDT');\r\nconst ethAsk = ask('ETH/USDT')[0];\n"})}),"\n",(0,s.jsx)(r.h2,{id:"script-parameters---strategy-configuration",children:"Script Parameters - Strategy Configuration"}),"\n",(0,s.jsx)(r.h3,{id:"global-args-variable",children:"Global ARGS Variable"}),"\n",(0,s.jsxs)(r.p,{children:["When launching a script in JT-Trader, a global variable ",(0,s.jsx)(r.code,{children:"ARGS"})," is created, which contains all parameters passed at launch. This variable is accessible in all parts of the code through ",(0,s.jsx)(r.code,{children:"getArg*()"})," functions."]}),"\n",(0,s.jsx)(r.h3,{id:"globalargs-type",children:"GlobalARGS Type"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'type GlobalARGS = {\r\n  // Required parameters\r\n  connectionName: string;        // Exchange connection name\r\n  symbols: string;              // "BTC/USDT,ETH/USDT" - symbol list\r\n  symbol: string;               // "BTC/USDT" - first symbol\r\n  \r\n  // Tester parameters (only in testing mode)\r\n  start: string;                // "2021-01" - start date\r\n  end: string;                  // "2021-12" - end date\r\n  startDate: Date;              // "2021-01-01T00:00:00.000Z"\r\n  endDate: Date;                // "2021-12-31T23:59:59.999Z"\r\n  timeframe: string;            // Timeframe for testing\r\n  optimizerIteration: number;   // Optimizer iteration number\r\n  makerFee: number;             // Maker fee\r\n  takerFee: number;             // Taker fee\r\n  marketOrderSpread: number;    // Spread for market orders\r\n  balance: number;              // Initial balance\r\n  leverage: number;             // Leverage\r\n  \r\n  // User parameters\r\n} & Record<string, string | number | boolean>;\n'})}),"\n",(0,s.jsx)(r.h3,{id:"launch-modes",children:"Launch Modes"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"1. Runtime Mode (real-time trading)"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Only required parameters and user parameters available"}),"\n",(0,s.jsx)(r.li,{children:"Tester parameters absent"}),"\n",(0,s.jsx)(r.li,{children:"Script works with real data"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"2. Tester Mode (testing on historical data)"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"All parameters available, including tester parameters"}),"\n",(0,s.jsx)(r.li,{children:"Script works with historical data"}),"\n",(0,s.jsx)(r.li,{children:"Parameter optimization supported"}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"required-parameters",children:"Required Parameters"}),"\n",(0,s.jsx)(r.p,{children:"When creating a script in JT-Trader, you must specify:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"connectionName"})," - exchange connection name"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"symbols"})," - list of trading pairs (comma-separated)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"interval"})," - timeframe for strategy (optional)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"user-parameters",children:"User Parameters"}),"\n",(0,s.jsxs)(r.p,{children:["Additional parameters are configured through JT-Trader interface and added to ",(0,s.jsx)(r.code,{children:"ARGS"}),":"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private buyPrice: number;\r\n  private sellPrice: number;\r\n  private volume: number;\r\n  private isTestMode: boolean;\r\n  \r\n  async onInit() {\r\n    // Get user parameters\r\n    this.buyPrice = getArgNumber('buyPrice', 50000);\r\n    this.sellPrice = getArgNumber('sellPrice', 55000);\r\n    this.volume = getArgNumber('volume', 0.001);\r\n    this.isTestMode = getArgBoolean('isTestMode', false);\r\n    \r\n    // Check operation mode\r\n    if (getArgString('start')) {\r\n      log('Script', 'Launch in tester mode', { \r\n        start: getArgString('start'), \r\n        end: getArgString('end'),\r\n        balance: getArgNumber('balance')\r\n      }, true);\r\n    } else {\r\n      log('Script', 'Launch in Runtime mode', {}, true);\r\n    }\r\n    \r\n    log('Script', 'Strategy parameters', {\r\n      buyPrice: this.buyPrice,\r\n      sellPrice: this.sellPrice,\r\n      volume: this.volume,\r\n      isTestMode: this.isTestMode\r\n    }, true);\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"advanced-strategy-examples",children:"Advanced Strategy Examples"}),"\n",(0,s.jsx)(r.h3,{id:"1-multi-symbol-strategy-with-ordersbasket",children:"1. Multi-Symbol Strategy with OrdersBasket"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"Advantages of using OrdersBasket:"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Automatic contract management"})," \u2014 proper USD to contracts conversion for each symbol"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Built-in SL/TP"})," \u2014 automatic stop-loss and take-profit order creation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Position management"})," \u2014 get information about current positions and their sizes"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Reduce-only orders"})," \u2014 safe position closing without opening new ones"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Centralized management"})," \u2014 all orders for symbol managed through one object"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Error handling"})," \u2014 built-in parameter validation and exchange error handling"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Important:"})," OrdersBasket is created separately for each symbol, as each symbol has its own parameters (contract size, minimum volumes, fees)."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private baskets: Record<string, OrdersBasket> = {};\r\n  private positions: Record<string, number> = {};\r\n  private buyPrices: Record<string, number> = {};\r\n  private sellPrices: Record<string, number> = {};\r\n  private usdAmount: number = 100; // Position size in USD\r\n  \r\n  async onInit() {\r\n    log('MultiSymbolStrategy', 'Multi-symbol strategy with OrdersBasket launched', {}, true);\r\n    \r\n    // Setup prices for each symbol\r\n    this.buyPrices['BTC/USDT'] = 50000;\r\n    this.sellPrices['BTC/USDT'] = 55000;\r\n    this.buyPrices['ETH/USDT'] = 3000;\r\n    this.sellPrices['ETH/USDT'] = 3300;\r\n    \r\n    // Create OrdersBasket for each symbol\r\n    for (const symbol of this.symbols) {\r\n      this.baskets[symbol] = new OrdersBasket({\r\n        symbol: symbol,\r\n        connectionName: this.connectionName,\r\n        leverage: getArgNumber('leverage', 1),\r\n        hedgeMode: this.hedgeMode\r\n      });\r\n      \r\n      await this.baskets[symbol].init();\r\n      this.positions[symbol] = 0;\r\n      \r\n      // Subscribe to ticks for each symbol\r\n      globals.events.subscribeOnTick(() => this.onSymbolTick(symbol), this, symbol, 1000);\r\n      \r\n      log('MultiSymbolStrategy', 'OrdersBasket initialized', { symbol }, true);\r\n    }\r\n  }\r\n  \r\n  async onSymbolTick(symbol: string) {\r\n    const basket = this.baskets[symbol];\r\n    const currentPrice = close(symbol); // Use native function with symbol\r\n    const buyPrice = this.buyPrices[symbol];\r\n    const sellPrice = this.sellPrices[symbol];\r\n    \r\n    if (!basket || !buyPrice || !sellPrice) return;\r\n    \r\n    // Buy when target price reached\r\n    if (currentPrice <= buyPrice && this.positions[symbol] === 0) {\r\n      // Convert USD to contracts\r\n      const contracts = basket.getContractsAmount(this.usdAmount, currentPrice);\r\n      \r\n      // Create market order with automatic SL/TP\r\n      const slPrice = currentPrice * 0.95; // Stop Loss 5% below\r\n      const tpPrice = currentPrice * 1.05; // Take Profit 5% above\r\n      \r\n      const order = await basket.buyMarket(contracts, tpPrice, slPrice);\r\n      this.positions[symbol] = 1;\r\n      \r\n      log('MultiSymbolStrategy', 'Bought contracts', { \r\n        symbol, contracts, currentPrice, slPrice, tpPrice, orderId: order.id \r\n      }, true);\r\n    }\r\n    \r\n    // Sell when target price reached\r\n    if (currentPrice >= sellPrice && this.positions[symbol] === 1) {\r\n      // Get current position\r\n      const position = await basket.getPosition();\r\n      if (position && position.size > 0) {\r\n        // Close position through reduce-only order\r\n        const closeOrder = await basket.createReduceOrder(\r\n          'market',\r\n          'long', // close long position\r\n          Math.abs(position.size), // position size\r\n          currentPrice\r\n        );\r\n        \r\n        this.positions[symbol] = 0;\r\n        log('MultiSymbolStrategy', 'Closed position', { \r\n          symbol, currentPrice, closeOrderId: closeOrder.id \r\n        }, true);\r\n      }\r\n    }\r\n  }\r\n  \r\n  async onStop() {\r\n    // Close all positions when stopping\r\n    for (const symbol of this.symbols) {\r\n      const basket = this.baskets[symbol];\r\n      if (basket) {\r\n        await basket.cancelAllOrders();\r\n        log('MultiSymbolStrategy', 'All orders cancelled', { symbol }, true);\r\n      }\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"2-timer-based-strategy",children:"2. Timer-Based Strategy"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  interval = 300000; // 5 minutes\r\n  private basket: OrdersBasket;\r\n  private lastAction: number = 0;\r\n  private usdAmount: number = 100;\r\n  \r\n  async onInit() {\r\n    log('TimerStrategy', 'Timer-based strategy launched', {}, true);\r\n    \r\n    // Create OrdersBasket for first symbol\r\n    this.basket = new OrdersBasket({\r\n      symbol: this.symbols[0],\r\n      connectionName: this.connectionName,\r\n      leverage: getArgNumber('leverage', 1),\r\n      hedgeMode: this.hedgeMode\r\n    });\r\n    \r\n    await this.basket.init();\r\n  }\r\n  \r\n  async onTimer() {\r\n    const now = Date.now();\r\n    \r\n    // Action every 5 minutes\r\n    if (now - this.lastAction > 300000) {\r\n      log('TimerStrategy', 'Execute timer action', {}, true);\r\n      \r\n      // Get market data through native functions\r\n      const currentPrice = close();\r\n      const askPrice = ask()[0];\r\n      const bidPrice = bid()[0];\r\n      \r\n      trace('TimerStrategy', 'Market data', { currentPrice, askPrice, bidPrice }, true);\r\n      \r\n      // Strategy logic\r\n      const balance = await getBalance();\r\n      log('TimerStrategy', 'Current balance', { balance: balance.total.USDT }, true);\r\n      \r\n      // Example timer-based trading\r\n      const contracts = this.basket.getContractsAmount(this.usdAmount, currentPrice);\r\n      log('TimerStrategy', 'Contract calculation', { contracts, usdAmount: this.usdAmount }, true);\r\n      \r\n      this.lastAction = now;\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"3-order-based-strategy",children:"3. Order-Based Strategy"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  private basket: OrdersBasket;\r\n  private pendingOrders: string[] = [];\r\n  private usdAmount: number = 100;\r\n  \r\n  async onInit() {\r\n    log('OrderBasedStrategy', 'Order-based strategy launched', {}, true);\r\n    \r\n    // Create OrdersBasket for first symbol\r\n    this.basket = new OrdersBasket({\r\n      symbol: this.symbols[0],\r\n      connectionName: this.connectionName,\r\n      leverage: getArgNumber('leverage', 1),\r\n      hedgeMode: this.hedgeMode\r\n    });\r\n    \r\n    await this.basket.init();\r\n    \r\n    // Create initial order\r\n    const currentPrice = close();\r\n    const contracts = this.basket.getContractsAmount(this.usdAmount, currentPrice);\r\n    const limitPrice = currentPrice * 0.9; // 10% below current price\r\n    \r\n    const order = await this.basket.buyLimit(contracts, limitPrice);\r\n    this.pendingOrders.push(order.id);\r\n    log('OrderBasedStrategy', 'Created buy limit order', { contracts, limitPrice, orderId: order.id }, true);\r\n  }\r\n  \r\n  async onOrderChange(order: Order) {\r\n    log('OrderBasedStrategy', 'Order status changed', { orderId: order.id, status: order.status }, true);\r\n    \r\n    if (order.status === 'filled') {\r\n      // Order filled\r\n      this.pendingOrders = this.pendingOrders.filter(id => id !== order.id);\r\n      \r\n      if (order.side === 'buy') {\r\n        // After purchase, create sell order\r\n        const currentPrice = close();\r\n        const contracts = this.basket.getContractsAmount(this.usdAmount, currentPrice);\r\n        const sellPrice = order.price * 1.02; // 2% above purchase price\r\n        \r\n        const sellOrder = await this.basket.sellLimit(contracts, sellPrice);\r\n        this.pendingOrders.push(sellOrder.id);\r\n        log('OrderBasedStrategy', 'Created sell limit order', { contracts, sellPrice, orderId: sellOrder.id }, true);\r\n      }\r\n    }\r\n    \r\n    if (order.status === 'cancelled') {\r\n      // Order cancelled\r\n      this.pendingOrders = this.pendingOrders.filter(id => id !== order.id);\r\n      log('OrderBasedStrategy', 'Order cancelled', { orderId: order.id }, true);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"additional-methods",children:"Additional Methods"}),"\n",(0,s.jsx)(r.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"onError = async (e: any): Promise<never | void> => {\r\n  console.error('Strategy error:', e);\r\n  // Custom error handling\r\n  throw e;\r\n};\n"})}),"\n",(0,s.jsx)(r.h3,{id:"parameter-updates",children:"Parameter Updates"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"async onArgsUpdate(args: GlobalARGS) {\r\n  log('Script', 'Strategy parameters updated', { args }, true);\r\n  // Update logic when parameters change\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{id:"exchange-event-handling",children:"Exchange Event Handling"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"async onEvent(event: string, data: any) {\r\n  log('ExchangeEvents', 'Exchange event', { event, data }, true);\r\n  // Handle WebSocket events\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsxs)(r.strong,{children:["Use ",(0,s.jsx)(r.code,{children:"onInit()"})," for initialization"]})," - don't perform heavy operations in constructor"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Use OrdersBasket for trading"})," - don't use direct trading methods, always work through OrdersBasket"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Use native functions for data"})," - ",(0,s.jsx)(r.code,{children:"close()"}),", ",(0,s.jsx)(r.code,{children:"ask()"}),", ",(0,s.jsx)(r.code,{children:"bid()"})," instead of parameters in ",(0,s.jsx)(r.code,{children:"onTick()"})]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Properly convert volumes"})," - use ",(0,s.jsx)(r.code,{children:"getContractsAmount()"})," to convert USD to contracts"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Handle errors"})," - override ",(0,s.jsx)(r.code,{children:"onError()"})," for custom error handling"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Manage resources"})," - use ",(0,s.jsx)(r.code,{children:"onStop()"})," for cleanup and order cancellation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Check initialization"})," - use ",(0,s.jsx)(r.code,{children:"isInitialized"})," flag"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Log actions"})," - use ",(0,s.jsx)(r.code,{children:"log()"}),", ",(0,s.jsx)(r.code,{children:"warning()"}),", ",(0,s.jsx)(r.code,{children:"error()"})," functions"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/docs/jt-lib/events-system",children:"Event System"})})," - In-depth study of EventEmitter"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/docs/jt-lib/core-fundamentals",children:"Core Fundamentals"})})," - Basic system components"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:(0,s.jsx)(r.a,{href:"/docs/jt-lib/introduction-architecture",children:"Introduction and Architecture"})})," - Library overview"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);