"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[483],{7778:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"jt-lib/reporting-system","title":"Reporting System","description":"The JT-Lib reporting system provides powerful tools for creating, displaying, and analyzing trading strategy results. Reports are displayed in the web interface and allow data visualization in various formats.","source":"@site/docs/jt-lib/reporting-system.md","sourceDirName":"jt-lib","slug":"/jt-lib/reporting-system","permalink":"/docs/docs/jt-lib/reporting-system","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/reporting-system.md","tags":[],"version":"current","frontMatter":{"id":"reporting-system","title":"Reporting System","sidebar_label":"Reporting System"},"sidebar":"tutorialSidebar","previous":{"title":"Technical Indicators","permalink":"/docs/docs/jt-lib/technical-indicators"},"next":{"title":"Introduction","permalink":"/docs/docs/jt-trader/getting-started"}}');var a=t(4848),i=t(8453);const s={id:"reporting-system",title:"Reporting System",sidebar_label:"Reporting System"},l="Reporting System",o={},d=[{value:"System Overview",id:"system-overview",level:2},{value:"Basic Operating Principles",id:"basic-operating-principles",level:3},{value:"Available Objects and Quick Start",id:"available-objects-and-quick-start",level:2},{value:"Global Report Object",id:"global-report-object",level:3},{value:"Quick Start",id:"quick-start",level:3},{value:"Main Reporting System Functions",id:"main-reporting-system-functions",level:2},{value:"cardSetValue",id:"cardsetvalue",level:3},{value:"tableUpdate",id:"tableupdate",level:3},{value:"chartAddPointAgg",id:"chartaddpointagg",level:3},{value:"chartAddPoint",id:"chartaddpoint",level:3},{value:"Widgets",id:"widgets",level:3},{value:"1. Cards",id:"1-cards",level:4},{value:"2. Tables",id:"2-tables",level:4},{value:"3. Charts",id:"3-charts",level:4},{value:"4. Text Blocks",id:"4-text-blocks",level:4},{value:"5. Action Buttons",id:"5-action-buttons",level:4},{value:"Data Types",id:"data-types",level:3},{value:"AggType (Aggregation Types)",id:"aggtype-aggregation-types",level:4},{value:"CardVariant (Card Types)",id:"cardvariant-card-types",level:4},{value:"ChartType (Chart Types)",id:"charttype-chart-types",level:4},{value:"Detailed Widget Description",id:"detailed-widget-description",level:2},{value:"1. Cards",id:"1-cards-1",level:3},{value:"Creating a Card",id:"creating-a-card",level:4},{value:"Card Types",id:"card-types",level:4},{value:"Display Formats",id:"display-formats",level:4},{value:"Data Aggregation",id:"data-aggregation",level:4},{value:"Card Options",id:"card-options",level:4},{value:"2. Tables",id:"2-tables-1",level:3},{value:"Creating a Table",id:"creating-a-table",level:4},{value:"Working with Data",id:"working-with-data",level:4},{value:"ReportTable Methods",id:"reporttable-methods",level:4},{value:"Table Limitations",id:"table-limitations",level:4},{value:"3. Charts",id:"3-charts-1",level:3},{value:"Creating a Chart",id:"creating-a-chart",level:4},{value:"Chart Types",id:"chart-types",level:4},{value:"Adding Data",id:"adding-data",level:4},{value:"ReportChart Methods",id:"reportchart-methods",level:4},{value:"Chart Data Aggregation",id:"chart-data-aggregation",level:4},{value:"Chart Options",id:"chart-options",level:4},{value:"4. Text Blocks",id:"4-text-blocks-1",level:3},{value:"Creating a Text Block",id:"creating-a-text-block",level:4},{value:"Display Variants",id:"display-variants",level:4},{value:"Alignment",id:"alignment",level:4},{value:"Text Options",id:"text-options",level:4},{value:"5. Action Buttons",id:"5-action-buttons-1",level:3},{value:"Creating an Action Button",id:"creating-an-action-button",level:4},{value:"Handling Actions",id:"handling-actions",level:4},{value:"Statistics and Analysis",id:"statistics-and-analysis",level:2},{value:"Automatic Statistics",id:"automatic-statistics",level:3},{value:"Creating Report with Statistics",id:"creating-report-with-statistics",level:3},{value:"Data Export",id:"data-export",level:2},{value:"Report Update",id:"report-update",level:3},{value:"Report Data Structure",id:"report-data-structure",level:3},{value:"Report Data Access",id:"report-data-access",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Example 1: Basic Trading Strategy Report",id:"example-1-basic-trading-strategy-report",level:3},{value:"Example 2: Optimization Report",id:"example-2-optimization-report",level:3},{value:"Example 3: Interactive Report",id:"example-3-interactive-report",level:3},{value:"Usage Recommendations",id:"usage-recommendations",level:2},{value:"Performance",id:"performance",level:3},{value:"Report Structure",id:"report-structure",level:3},{value:"Debugging",id:"debugging",level:3}];function c(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"reporting-system",children:"Reporting System"})}),"\n",(0,a.jsx)(r.p,{children:"The JT-Lib reporting system provides powerful tools for creating, displaying, and analyzing trading strategy results. Reports are displayed in the web interface and allow data visualization in various formats."}),"\n",(0,a.jsx)(r.h2,{id:"system-overview",children:"System Overview"}),"\n",(0,a.jsx)(r.p,{children:"The reporting system includes:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Widgets"})," - various types of data display (cards, tables, charts, text)"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Statistics"})," - automatic analysis of trading results"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Data Export"})," - saving results in various formats"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Interactivity"})," - action buttons for real-time strategy management"]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"basic-operating-principles",children:"Basic Operating Principles"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:["For the tester, the report should be updated in the ",(0,a.jsx)(r.code,{children:"onStop()"})," function after script completion"]}),"\n",(0,a.jsx)(r.li,{children:"For live trading, the report can be updated at time intervals (recommended no more than every 5 seconds)"}),"\n",(0,a.jsx)(r.li,{children:"All logs are automatically added to the report by default"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"available-objects-and-quick-start",children:"Available Objects and Quick Start"}),"\n",(0,a.jsx)(r.h3,{id:"global-report-object",children:"Global Report Object"}),"\n",(0,a.jsxs)(r.p,{children:["The reporting system provides a ready-to-use global object ",(0,a.jsx)(r.code,{children:"globals.report"}),", which is automatically initialized when starting a trading script. All widgets are created automatically on first access to the corresponding methods."]}),"\n",(0,a.jsx)(r.h3,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsx)(r.p,{children:"The reporting system is ready to use immediately after starting a trading script. Below are examples of typical usage:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Report setup\r\nglobals.report.setTitle('Grid Bot Example');\r\nglobals.report.setDescription('Multi-coin grid strategy example. Strategy logic is based in the GridBasket class.');\r\n\r\n// Update cards (widgets are created automatically)\r\nglobals.report.cardSetValue('currentPrice', 50000);\r\nglobals.report.cardSetValue('profit', 1500, 'max');\r\nglobals.report.cardSetValue('totalOrders', 25);\r\n\r\n// Update tables (widgets are created automatically)\r\nglobals.report.tableUpdate('orders', {\r\n  id: 1,\r\n  symbol: 'BTC/USDT',\r\n  side: 'buy',\r\n  amount: 0.1,\r\n  price: 50000,\r\n  status: 'closed'\r\n});\r\n\r\n// Add data to charts (widgets are created automatically)\r\nglobals.report.chartAddPointAgg('profit', 'profit', 1500, 'max');\r\nglobals.report.chartAddPoint('balance', 'balance', Date.now(), 10000);\r\n\r\n// Update report\r\nawait globals.report.updateReport();\n"})}),"\n",(0,a.jsxs)(r.blockquote,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Important"}),": No need to create widget instances manually. All widgets are created automatically on first call to the corresponding methods."]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"main-reporting-system-functions",children:"Main Reporting System Functions"}),"\n",(0,a.jsx)(r.h3,{id:"cardsetvalue",children:"cardSetValue"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"cardSetValue"})," function automatically creates a card with the specified name and sets its value. The card is created on first call to the function if it doesn't exist yet."]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"globals.report.cardSetValue(name: string, value: number|string, aggType?: AggType)\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"name"})," - unique card name"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"value"})," - value to display (number or string)"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"aggType"})," - aggregation type (optional): 'last', 'min', 'max', 'sum', 'avg'"]}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"How it works:"})}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["If a card with the specified name doesn't exist, a new card with ",(0,a.jsx)(r.code,{children:"Number"})," type is created by default"]}),"\n",(0,a.jsx)(r.li,{children:"Value is set according to the aggregation type"}),"\n",(0,a.jsx)(r.li,{children:"On subsequent calls, the value is updated with aggregation applied"}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Usage examples:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Simple value update\r\nglobals.report.cardSetValue('currentPrice', 50000);\r\n\r\n// Update with aggregation - maximum value\r\nglobals.report.cardSetValue('maxProfit', 2000, 'max');\r\n\r\n// Update with aggregation - sum\r\nglobals.report.cardSetValue('totalVolume', 1000, 'sum');\n"})}),"\n",(0,a.jsx)(r.h3,{id:"tableupdate",children:"tableUpdate"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"tableUpdate"})," function automatically creates a table with the specified name and updates it with data. The table is created on first call to the function if it doesn't exist yet."]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"globals.report.tableUpdate(name: string, data: TableRow|TableRow[])\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"name"})," - unique table name"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"data"})," - object with row data or array of objects for bulk update"]}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"How it works:"})}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"If a table with the specified name doesn't exist, a new table is created"}),"\n",(0,a.jsxs)(r.li,{children:["If an object with an ",(0,a.jsx)(r.code,{children:"id"})," field is passed, the system tries to update an existing record"]}),"\n",(0,a.jsxs)(r.li,{children:["If a record with the specified ",(0,a.jsx)(r.code,{children:"id"})," is not found, a new record is created"]}),"\n",(0,a.jsx)(r.li,{children:"If an array of objects is passed, bulk update is performed"}),"\n",(0,a.jsx)(r.li,{children:"Old records are automatically removed when row limit is exceeded (300 by default)"}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Usage examples:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Add new record\r\nglobals.report.tableUpdate('orders', {\r\n  id: 1,\r\n  symbol: 'BTC/USDT',\r\n  side: 'buy',\r\n  amount: 0.1,\r\n  price: 50000,\r\n  status: 'open'\r\n});\r\n\r\n// Update existing record\r\nglobals.report.tableUpdate('orders', {\r\n  id: 1,\r\n  status: 'closed',\r\n  profit: 500\r\n});\r\n\r\n// Bulk update\r\nglobals.report.tableUpdate('orders', [\r\n  { id: 1, symbol: 'BTC/USDT', side: 'buy', amount: 0.1, price: 50000 },\r\n  { id: 2, symbol: 'ETH/USDT', side: 'sell', amount: 1.0, price: 3000 }\r\n]);\n"})}),"\n",(0,a.jsx)(r.h3,{id:"chartaddpointagg",children:"chartAddPointAgg"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"chartAddPointAgg"})," function automatically creates a chart with the specified name and adds a data point with aggregation. The chart is created on first call to the function if it doesn't exist yet."]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"globals.report.chartAddPointAgg(name: string, lineName: string, value: number, aggType: AggType)\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"name"})," - unique chart name"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"lineName"})," - line name on the chart"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"value"})," - value to add"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"aggType"})," - aggregation type: 'last', 'min', 'max', 'sum', 'avg'"]}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"How it works:"})}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["If a chart with the specified name doesn't exist, a new ",(0,a.jsx)(r.code,{children:"Line"})," type chart is created"]}),"\n",(0,a.jsx)(r.li,{children:"If a line with the specified name doesn't exist, a new line is created"}),"\n",(0,a.jsx)(r.li,{children:"Value is added with the specified aggregation applied"}),"\n",(0,a.jsx)(r.li,{children:"Old points are automatically removed when limit is exceeded (5000 by default)"}),"\n",(0,a.jsx)(r.li,{children:"Data is aggregated by time periods (1 day by default)"}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Usage examples:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Add point with maximum value\r\nglobals.report.chartAddPointAgg('profitChart', 'profit', 1500, 'max');\r\n\r\n// Add point with minimum value\r\nglobals.report.chartAddPointAgg('drawdownChart', 'drawdown', -200, 'min');\r\n\r\n// Add point with average value\r\nglobals.report.chartAddPointAgg('balanceChart', 'balance', 10000, 'avg');\n"})}),"\n",(0,a.jsx)(r.h3,{id:"chartaddpoint",children:"chartAddPoint"}),"\n",(0,a.jsxs)(r.p,{children:["The ",(0,a.jsx)(r.code,{children:"chartAddPoint"})," function automatically creates a chart with the specified name and adds a data point with exact X and Y coordinates. The chart is created on first call to the function if it doesn't exist yet."]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"globals.report.chartAddPoint(name: string, lineName: string, valueX: number, valueY: number)\n"})}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"name"})," - unique chart name"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"lineName"})," - line name on the chart"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"valueX"})," - X coordinate (usually time in milliseconds)"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.code,{children:"valueY"})," - Y coordinate (value to display)"]}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"How it works:"})}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["If a chart with the specified name doesn't exist, a new ",(0,a.jsx)(r.code,{children:"Line"})," type chart is created"]}),"\n",(0,a.jsx)(r.li,{children:"If a line with the specified name doesn't exist, a new line is created"}),"\n",(0,a.jsx)(r.li,{children:"Point is added with exact coordinates without aggregation"}),"\n",(0,a.jsx)(r.li,{children:"Old points are automatically removed when limit is exceeded (5000 by default)"}),"\n",(0,a.jsx)(r.li,{children:"Data is displayed in original form without time aggregation"}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Usage examples:"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Add point with current time\r\nglobals.report.chartAddPoint('balanceChart', 'balance', Date.now(), 10000);\r\n\r\n// Add point with specific time\r\nconst timestamp = new Date('2024-01-01T12:00:00Z').getTime();\r\nglobals.report.chartAddPoint('priceChart', 'price', timestamp, 50000);\r\n\r\n// Add point with custom X coordinate\r\nglobals.report.chartAddPoint('customChart', 'data', 100, 250);\n"})}),"\n",(0,a.jsx)(r.h3,{id:"widgets",children:"Widgets"}),"\n",(0,a.jsx)(r.h4,{id:"1-cards",children:"1. Cards"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Automatic creation and value updates\r\nglobals.report.cardSetValue(name: string, value: number|string, aggType?: AggType)\r\n\r\n// Manual creation (optional)\r\nglobals.report.createCard(name: string, options: CardOptions)\r\nglobals.report.addCard(name: string, card: ReportCard)\r\n\r\n// Get existing widget\r\nglobals.report.getCardByName(name: string): ReportCard\n"})}),"\n",(0,a.jsx)(r.h4,{id:"2-tables",children:"2. Tables"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Automatic creation and data updates\r\nglobals.report.tableUpdate(name: string, data: TableRow|TableRow[])\r\n\r\n// Manual creation (optional)\r\nglobals.report.createTable(name: string, title: string)\r\nglobals.report.addTable(name: string, table: ReportTable)\r\n\r\n// Get existing widget\r\nglobals.report.getTableByName(name: string): ReportTable\n"})}),"\n",(0,a.jsx)(r.h4,{id:"3-charts",children:"3. Charts"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Automatic creation and data addition\r\nglobals.report.chartAddPointAgg(name: string, lineName: string, value: number, aggType: AggType)\r\nglobals.report.chartAddPointAggByDate(name: string, lineName: string, value: number, aggType: AggType)\r\nglobals.report.chartAddPoint(name: string, lineName: string, valueX: number, valueY: number)\r\n\r\n// Manual creation (optional)\r\nglobals.report.createChart(name: string, options: ChartOptions)\r\nglobals.report.addChart(name: string, chart: ReportChart)\r\n\r\n// Get existing widget\r\nglobals.report.getChartByName(name: string): ReportChart\n"})}),"\n",(0,a.jsx)(r.h4,{id:"4-text-blocks",children:"4. Text Blocks"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Automatic creation\r\nglobals.report.createText(name: string, text: string, variant: string, align: string)\r\n\r\n// Manual creation (optional)\r\nglobals.report.addText(name: string, text: ReportText)\r\n\r\n// Get existing widget\r\nglobals.report.getTextByName(name: string): ReportText\n"})}),"\n",(0,a.jsx)(r.h4,{id:"5-action-buttons",children:"5. Action Buttons"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Automatic creation\r\nglobals.report.createActionButton(title: string, action: string, value: string, callback?: Function, layoutIndex?: number)\r\n\r\n// Manual creation (optional)\r\nglobals.report.addActionButton(name: string, button: ReportActionButton)\r\n\r\n// Get existing widget\r\nglobals.report.getActionButtonByName(name: string): ReportActionButton\n"})}),"\n",(0,a.jsx)(r.h3,{id:"data-types",children:"Data Types"}),"\n",(0,a.jsx)(r.h4,{id:"aggtype-aggregation-types",children:"AggType (Aggregation Types)"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"type AggType = 'last' | 'min' | 'max' | 'sum' | 'avg'\n"})}),"\n",(0,a.jsx)(r.h4,{id:"cardvariant-card-types",children:"CardVariant (Card Types)"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"enum CardVariant {\r\n  Text = 'text',      // Text values\r\n  Number = 'number',  // Numeric values\r\n  Percent = 'percent' // Percentage values\r\n}\n"})}),"\n",(0,a.jsx)(r.h4,{id:"charttype-chart-types",children:"ChartType (Chart Types)"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"enum ChartType {\r\n  Line = 'line',  // Line chart\r\n  Area = 'area'   // Area chart\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"detailed-widget-description",children:"Detailed Widget Description"}),"\n",(0,a.jsx)(r.h3,{id:"1-cards-1",children:"1. Cards"}),"\n",(0,a.jsx)(r.p,{children:"Cards display individual variable values in a convenient format."}),"\n",(0,a.jsx)(r.h4,{id:"creating-a-card",children:"Creating a Card"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Recommended way - automatic creation when updating value\r\nglobals.report.cardSetValue('profit', 1500, 'max');\r\n\r\n// Manual creation with settings (if customization is required)\r\nglobals.report.createCard('profit', {\r\n  title: 'Profit',\r\n  variant: CardVariant.Number,\r\n  options: {\r\n    format: CardNumberFormat.Currency,\r\n    currency: 'USD',\r\n    icon: 'chart-up'\r\n  }\r\n});\r\n\r\n// Create ReportCard instance (for advanced usage)\r\nconst profitCard = new ReportCard({\r\n  title: 'Profit',\r\n  variant: CardVariant.Number,\r\n  options: {\r\n    format: CardNumberFormat.Currency,\r\n    currency: 'USD'\r\n  }\r\n});\r\n\r\nglobals.report.addCard('profit', profitCard);\n"})}),"\n",(0,a.jsx)(r.h4,{id:"card-types",children:"Card Types"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Text"})," - text values"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Number"})," - numeric values"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Percent"})," - percentage values"]}),"\n"]}),"\n",(0,a.jsx)(r.h4,{id:"display-formats",children:"Display Formats"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Default"})," - standard display"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Currency"})," - currency format"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Date"})," - date format"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Short"})," - short format"]}),"\n"]}),"\n",(0,a.jsx)(r.h4,{id:"data-aggregation",children:"Data Aggregation"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Last value\r\nglobals.report.cardSetValue('profit', 1500, 'last');\r\n\r\n// Maximum value\r\nglobals.report.cardSetValue('maxProfit', 2000, 'max');\r\n\r\n// Minimum value\r\nglobals.report.cardSetValue('minProfit', -500, 'min');\r\n\r\n// Sum\r\nglobals.report.cardSetValue('totalVolume', 10000, 'sum');\r\n\r\n// Average value\r\nglobals.report.cardSetValue('avgProfit', 150, 'avg');\n"})}),"\n",(0,a.jsx)(r.h4,{id:"card-options",children:"Card Options"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"interface CardOptions {\r\n  format?: CardNumberFormat;  // Display format\r\n  currency?: string;          // Currency\r\n  icon?: string;             // Icon\r\n  caption?: string;          // Caption\r\n  isVisible?: boolean;       // Visibility\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"2-tables-1",children:"2. Tables"}),"\n",(0,a.jsx)(r.p,{children:"Tables display structured data in rows and columns."}),"\n",(0,a.jsx)(r.h4,{id:"creating-a-table",children:"Creating a Table"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Recommended way - automatic creation when updating data\r\nglobals.report.tableUpdate('orders', {\r\n  id: 1,\r\n  symbol: 'BTC/USDT',\r\n  side: 'buy',\r\n  amount: 0.1,\r\n  price: 50000,\r\n  status: 'closed'\r\n});\r\n\r\n// Manual creation with title (if customization is required)\r\nglobals.report.createTable('orders', 'Order History');\r\n\r\n// Create ReportTable instance (for advanced usage)\r\nconst ordersTable = new ReportTable('Order History');\r\nglobals.report.addTable('orders', ordersTable);\n"})}),"\n",(0,a.jsx)(r.h4,{id:"working-with-data",children:"Working with Data"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Add record\r\nglobals.report.tableUpdate('orders', {\r\n  id: 1,\r\n  symbol: 'BTC/USDT',\r\n  side: 'buy',\r\n  amount: 0.1,\r\n  price: 50000,\r\n  status: 'closed',\r\n  profit: 500\r\n});\r\n\r\n// Update record\r\nglobals.report.tableUpdate('orders', {\r\n  id: 1,\r\n  status: 'closed',\r\n  profit: 750\r\n});\r\n\r\n// Bulk update\r\nconst orders = [\r\n  { id: 1, symbol: 'BTC/USDT', side: 'buy', amount: 0.1, price: 50000 },\r\n  { id: 2, symbol: 'ETH/USDT', side: 'sell', amount: 1.0, price: 3000 }\r\n];\r\nglobals.report.tableUpdate('orders', orders);\n"})}),"\n",(0,a.jsx)(r.h4,{id:"reporttable-methods",children:"ReportTable Methods"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"const table = globals.report.getTableByName('orders');\r\n\r\n// Insert record\r\ntable.insert(row: TableRow, idField?: string): boolean\r\n\r\n// Update record\r\ntable.update(row: TableRow, idField?: string): boolean\r\n\r\n// Insert or update\r\ntable.upsert(row: TableRow, idField?: string): boolean\r\n\r\n// Bulk operations\r\ntable.insertRecords(rows: TableRow[], idField?: string)\r\ntable.updateRecords(rows: TableRow[], idField?: string)\r\ntable.upsertRecords(rows: TableRow[], idField?: string)\r\n\r\n// Clear table\r\ntable.clear(): boolean\r\n\r\n// Set row limit\r\ntable.setMaxRows(maxRows: number)\n"})}),"\n",(0,a.jsx)(r.h4,{id:"table-limitations",children:"Table Limitations"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Maximum 300 rows by default (configurable)"}),"\n",(0,a.jsx)(r.li,{children:"Automatic removal of old records when limit is exceeded"}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"3-charts-1",children:"3. Charts"}),"\n",(0,a.jsx)(r.p,{children:"Charts visualize data as lines or areas."}),"\n",(0,a.jsx)(r.h4,{id:"creating-a-chart",children:"Creating a Chart"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Recommended way - automatic creation when adding data\r\nglobals.report.chartAddPointAgg('profitChart', 'profit', 1500, 'max');\r\n\r\n// Manual creation with settings (if customization is required)\r\nglobals.report.createChart('profitChart', {\r\n  chartType: ChartType.Line,\r\n  maxPoints: 1000,\r\n  aggPeriod: 3600000 // 1 hour\r\n});\r\n\r\n// Create ReportChart instance (for advanced usage)\r\nconst profitChart = new ReportChart('Profit Chart', {\r\n  chartType: ChartType.Area,\r\n  maxPoints: 5000\r\n});\r\nglobals.report.addChart('profitChart', profitChart);\n"})}),"\n",(0,a.jsx)(r.h4,{id:"chart-types",children:"Chart Types"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Line"})," - line chart"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Area"})," - area chart"]}),"\n"]}),"\n",(0,a.jsx)(r.h4,{id:"adding-data",children:"Adding Data"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Add point with aggregation\r\nglobals.report.chartAddPointAgg('profitChart', 'profit', 1500, 'max');\r\n\r\n// Add point by date\r\nglobals.report.chartAddPointAggByDate('profitChart', 'profit', 1500, 'max');\r\n\r\n// Configure lines\r\nconst chart = globals.report.getChartByName('profitChart');\r\nchart.setLineInfo('profit', 'max', '#3F51B5');\r\nchart.setLineInfo('drawdown', 'min', '#FD6A6A');\n"})}),"\n",(0,a.jsx)(r.h4,{id:"reportchart-methods",children:"ReportChart Methods"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"const chart = globals.report.getChartByName('profitChart');\r\n\r\n// Configure lines\r\nchart.setLineInfo(name: string, aggType: AggType, color?: string)\r\n\r\n// Add points\r\nchart.addPoint(lineName: string, valueX: number, valueY: number, color?: string)\r\nchart.addPointByDate(lineName: string, valueY: number, color?: string)\r\nchart.addPointAggByDate(lineName: string, value: number, aggType: AggType, color?: string)\r\n\r\n// Get data\r\nchart.getLine(name: string): number[]\r\nchart.getLength(): number\r\n\r\n// Clear\r\nchart.clear()\r\n\r\n// Configure aggregation\r\nchart.setAggPeriodByDates(start: number, end: number, dotCount: number)\n"})}),"\n",(0,a.jsx)(r.h4,{id:"chart-data-aggregation",children:"Chart Data Aggregation"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"last"})," - last value"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"max"})," - maximum value"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"min"})," - minimum value"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"sum"})," - sum of values"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"avg"})," - average value"]}),"\n"]}),"\n",(0,a.jsx)(r.h4,{id:"chart-options",children:"Chart Options"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"interface ReportChartOptions {\r\n  maxPoints?: number;    // Maximum points (default 5000)\r\n  aggPeriod?: number;    // Aggregation period in ms (default 1 day)\r\n  chartType?: ChartType; // Chart type\r\n  layoutIndex?: number;  // Layout index\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"4-text-blocks-1",children:"4. Text Blocks"}),"\n",(0,a.jsx)(r.p,{children:"Text blocks display arbitrary text in the report."}),"\n",(0,a.jsx)(r.h4,{id:"creating-a-text-block",children:"Creating a Text Block"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Recommended way - direct creation\r\nglobals.report.createText('summary', 'Strategy Summary', 'subtitle1', 'center');\r\n\r\n// Create ReportText instance (for advanced usage)\r\nconst summaryText = new ReportText('Strategy Summary', 'subtitle1', 'center');\r\nglobals.report.addText('summary', summaryText);\n"})}),"\n",(0,a.jsx)(r.h4,{id:"display-variants",children:"Display Variants"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"h1, h2, h3"})," - different level headings"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"subtitle1, subtitle2"})," - subtitles"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"body1, body2"})," - main text"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"caption"})," - small text"]}),"\n"]}),"\n",(0,a.jsx)(r.h4,{id:"alignment",children:"Alignment"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"left"})," - left aligned"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"center"})," - center aligned"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"right"})," - right aligned"]}),"\n"]}),"\n",(0,a.jsx)(r.h4,{id:"text-options",children:"Text Options"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"interface TextOptions {\r\n  variant?: string;  // Display variant\r\n  align?: string;    // Alignment\r\n  isVisible?: boolean; // Visibility\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"5-action-buttons-1",children:"5. Action Buttons"}),"\n",(0,a.jsx)(r.p,{children:"Action buttons allow sending commands to the running runtime."}),"\n",(0,a.jsx)(r.h4,{id:"creating-an-action-button",children:"Creating an Action Button"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Recommended way - direct creation\r\nglobals.report.createActionButton('Close Position', 'closePosition', 'BTC/USDT');\r\n\r\n// Create with callback function\r\nglobals.report.createActionButton('Start Trading', 'startTrading', '', async (data) => {\r\n  this.isTrading = true;\r\n  await globals.report.updateReport();\r\n});\r\n\r\n// Create ReportActionButton instance (for advanced usage)\r\nconst closeButton = new ReportActionButton('Close Position', 'closePosition', 'BTC/USDT');\r\nglobals.report.addActionButton('closeButton', closeButton);\n"})}),"\n",(0,a.jsx)(r.h4,{id:"handling-actions",children:"Handling Actions"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"async onReportAction(action: string, data: any) {\r\n  switch (action) {\r\n    case 'closePosition':\r\n      await this.closePosition(data);\r\n      break;\r\n    case 'startTrading':\r\n      this.isTrading = true;\r\n      break;\r\n    case 'stopTrading':\r\n      this.isTrading = false;\r\n      break;\r\n  }\r\n  \r\n  await globals.report.updateReport();\r\n}\n"})}),"\n",(0,a.jsxs)(r.blockquote,{children:["\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Note"}),": Action buttons are used only for real-time robots, not for the tester."]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"statistics-and-analysis",children:"Statistics and Analysis"}),"\n",(0,a.jsx)(r.h3,{id:"automatic-statistics",children:"Automatic Statistics"}),"\n",(0,a.jsx)(r.p,{children:"The system automatically collects statistics on trading operations:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"class Statistics extends BaseObject {\r\n  ordersOpenedCnt = 0;      // Number of opened orders\r\n  ordersClosedCnt = 0;      // Number of closed orders\r\n  ordersCanceledCnt = 0;    // Number of canceled orders\r\n  ordersModifiedCnt = 0;    // Number of modified orders\r\n  ordersTotalCnt = 0;       // Total number of orders\r\n  volume = 0;               // Total trading volume\r\n  profit = 0;               // Total profit\r\n  bestTrade = 0;            // Best trade\r\n  worstTrade = 0;           // Worst trade\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"creating-report-with-statistics",children:"Creating Report with Statistics"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"  async onStop() {\r\n    // Set values (cards are created automatically)\r\n    globals.report.cardSetValue('totalOrders', this.statistics.ordersTotalCnt);\r\n    globals.report.cardSetValue('profit', this.statistics.profit);\r\n    globals.report.cardSetValue('winRate', this.calculateWinRate());\r\n    \r\n    // Update report\r\n    await globals.report.updateReport();\r\n  }\n"})}),"\n",(0,a.jsx)(r.h2,{id:"data-export",children:"Data Export"}),"\n",(0,a.jsx)(r.h3,{id:"report-update",children:"Report Update"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Update report on server\r\nawait globals.report.updateReport();\r\n\r\n// Force update (ignores frequency limitations)\r\nawait globals.report.updateReport({ isForce: true });\n"})}),"\n",(0,a.jsx)(r.h3,{id:"report-data-structure",children:"Report Data Structure"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"interface ReportData {\r\n  id: string;           // Unique report identifier\r\n  symbol: string;       // Trading symbol\r\n  description?: string; // Report description\r\n  blocks: ReportBlock[]; // Report blocks\r\n}\r\n\r\ninterface ReportBlock {\r\n  type: ReportBlockType; // Block type\r\n  name?: string;         // Block name\r\n  data: ReportBlockData; // Block data\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"report-data-access",children:"Report Data Access"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"// Get report data\r\nconst reportData = globals.report.getReportData();\r\n\r\n// Export to JSON\r\nconst jsonData = JSON.stringify(reportData, null, 2);\n"})}),"\n",(0,a.jsx)(r.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,a.jsx)(r.h3,{id:"example-1-basic-trading-strategy-report",children:"Example 1: Basic Trading Strategy Report"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  async onInit() {\r\n    // Report setup\r\n    globals.report.setTitle('Trading Strategy Report');\r\n    globals.report.setDescription('Automated trading strategy with real-time monitoring');\r\n    \r\n    // Widgets are created automatically on first access\r\n    // No additional actions required\r\n  }\r\n  \r\n  async onTick() {\r\n    // Update cards (widgets are created automatically)\r\n    globals.report.cardSetValue('currentPrice', this.getCurrentPrice());\r\n    globals.report.cardSetValue('position', this.getPositionStatus());\r\n    \r\n    // Add point to chart (widget is created automatically)\r\n    globals.report.chartAddPointAggByDate('profit', 'profit', this.getTotalProfit(), 'max');\r\n    \r\n    // Update report every 5 ticks\r\n    if (this.tickCount % 5 === 0) {\r\n      await globals.report.updateReport();\r\n    }\r\n  }\r\n  \r\n  async onOrderChange(order: Order) {\r\n    // Add order to table (widget is created automatically)\r\n    globals.report.tableUpdate('orders', {\r\n      id: order.id,\r\n      symbol: order.symbol,\r\n      side: order.side,\r\n      amount: order.amount,\r\n      price: order.price,\r\n      status: order.status,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n  \r\n  async onStop() {\r\n    // Final report update\r\n    await globals.report.updateReport();\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"example-2-optimization-report",children:"Example 2: Optimization Report"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  async onStop() {\r\n    // Add optimization parameters\r\n    globals.report.optimizedSetValue('profit', this.totalProfit, 'max');\r\n    globals.report.optimizedSetValue('drawdown', this.maxDrawdown, 'min');\r\n    globals.report.optimizedSetValue('winRate', this.winRate, 'avg');\r\n    globals.report.optimizedSetValue('sharpeRatio', this.sharpeRatio, 'max');\r\n    \r\n    // Create optimization results table\r\n    globals.report.createTable('optimization', 'Optimization Results');\r\n    globals.report.tableUpdate('optimization', {\r\n      parameter: 'RSI Period',\r\n      value: this.rsiPeriod,\r\n      profit: this.totalProfit,\r\n      drawdown: this.maxDrawdown,\r\n      winRate: this.winRate\r\n    });\r\n    \r\n    await globals.report.updateReport();\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"example-3-interactive-report",children:"Example 3: Interactive Report"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  async onInit() {\r\n    // Create control buttons\r\n    globals.report.createActionButton('Start Trading', 'startTrading', '');\r\n    globals.report.createActionButton('Stop Trading', 'stopTrading', '');\r\n    globals.report.createActionButton('Close All Positions', 'closeAll', '');\r\n    \r\n    // Information cards are created automatically when updating values\r\n  }\r\n  \r\n  async onReportAction(action: string, data: any) {\r\n    switch (action) {\r\n      case 'startTrading':\r\n        this.isTrading = true;\r\n        globals.report.cardSetValue('status', 'Trading Active');\r\n        break;\r\n        \r\n      case 'stopTrading':\r\n        this.isTrading = false;\r\n        globals.report.cardSetValue('status', 'Trading Stopped');\r\n        break;\r\n        \r\n      case 'closeAll':\r\n        await this.closeAllPositions();\r\n        globals.report.cardSetValue('status', 'All Positions Closed');\r\n        break;\r\n    }\r\n    \r\n    await globals.report.updateReport();\r\n  }\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"usage-recommendations",children:"Usage Recommendations"}),"\n",(0,a.jsx)(r.h3,{id:"performance",children:"Performance"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Update Frequency"}),": Don't update report more than every 5 seconds in live trading"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Data Limits"}),": Use reasonable limits for tables and charts"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Aggregation"}),": Use aggregation for large data volumes"]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"report-structure",children:"Report Structure"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Header"}),": Always set report title and description"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Logical Grouping"}),": Group related widgets together"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Information Priority"}),": Place most important information at the beginning of the report"]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"debugging",children:"Debugging"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Logging"}),": Use built-in logging for debugging"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Data Validation"}),": Check data correctness before adding to report"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Error Handling"}),": Handle errors when creating and updating widgets"]}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"The JT-Lib reporting system provides all necessary tools for creating informative and interactive trading strategy reports, allowing traders to effectively analyze results and make informed decisions."})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>l});var n=t(6540);const a={},i=n.createContext(a);function s(e){const r=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);