"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[785],{1576:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/best-pactice-v2-7deba6a0616bcf1fa02993aafc912101.png"},3584:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"jt-lib/script-best-practices","title":"Script Development Best Practices","description":"Script Lifecycle Architecture","source":"@site/docs/jt-lib/script-best-practices.md","sourceDirName":"jt-lib","slug":"/jt-lib/script-best-practices","permalink":"/docs/docs/jt-lib/script-best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/script-best-practices.md","tags":[],"version":"current","frontMatter":{"id":"script-best-practices","title":"Script Development Best Practices","sidebar_label":"Best Practices"},"sidebar":"tutorialSidebar","previous":{"title":"Script Launch","permalink":"/docs/docs/jt-lib/script-launch"},"next":{"title":"Core Fundamentals","permalink":"/docs/docs/jt-lib/core-fundamentals"}}');var t=n(4848),s=n(8453);const a={id:"script-best-practices",title:"Script Development Best Practices",sidebar_label:"Best Practices"},c="Script Development Best Practices",l={},o=[{value:"Multi-Currency Trading Bot Architecture",id:"multi-currency-trading-bot-architecture",level:2},{value:"Separation of Responsibilities Principle",id:"separation-of-responsibilities-principle",level:3},{value:"Multi-Currency Architecture",id:"multi-currency-architecture",level:3},{value:"Trading Bot Lifecycle",id:"trading-bot-lifecycle",level:3},{value:"Script Parameter Definition",id:"script-parameter-definition",level:2},{value:"Using OrdersBasket for Trading Logic",id:"using-ordersbasket-for-trading-logic",level:2},{value:"Example: GridBot Strategy",id:"example-gridbot-strategy",level:3},{value:"Key Principles",id:"key-principles",level:2},{value:"1. Modular Architecture",id:"1-modular-architecture",level:3},{value:"2. Initialization Delay",id:"2-initialization-delay",level:3},{value:"3. Parameter Definition",id:"3-parameter-definition",level:3},{value:"4. Script Metadata",id:"4-script-metadata",level:3},{value:"5. Error Handling",id:"5-error-handling",level:3},{value:"6. Basket Independence",id:"6-basket-independence",level:3},{value:"7. Reporting Usage",id:"7-reporting-usage",level:3},{value:"Performance Recommendations",id:"performance-recommendations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"script-development-best-practices",children:"Script Development Best Practices"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{alt:"Script Lifecycle Architecture",src:n(1576).A+"",width:"1200",height:"672"})}),"\n",(0,t.jsx)(r.h2,{id:"multi-currency-trading-bot-architecture",children:"Multi-Currency Trading Bot Architecture"}),"\n",(0,t.jsxs)(r.p,{children:["This section describes the key principles for creating effective and reliable trading scripts in JT-Lib, based on separation of responsibilities between the ",(0,t.jsx)(r.code,{children:"Script"})," and ",(0,t.jsx)(r.code,{children:"OrdersBasket"})," classes."]}),"\n",(0,t.jsx)(r.h3,{id:"separation-of-responsibilities-principle",children:"Separation of Responsibilities Principle"}),"\n",(0,t.jsx)(r.p,{children:"JT-Lib architecture is built on clear role separation between two main components:"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Script Class"})," serves as coordinator and manager:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Performs overall setup and configuration of trading strategy"}),"\n",(0,t.jsx)(r.li,{children:"Defines parameters for all trading pairs (symbols)"}),"\n",(0,t.jsxs)(r.li,{children:["Creates and manages ",(0,t.jsx)(r.code,{children:"OrdersBasket"})," instances for each symbol"]}),"\n",(0,t.jsx)(r.li,{children:"Monitors and controls all active baskets"}),"\n",(0,t.jsx)(r.li,{children:"Handles global events and coordinates work between different trading pairs"}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"OrdersBasket Class"})," implements specific trading logic:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Contains the entire algorithm and trading strategy logic for a specific symbol"}),"\n",(0,t.jsx)(r.li,{children:"Connects to exchange and manages trading operations for one trading pair"}),"\n",(0,t.jsx)(r.li,{children:"Handles market data, orders, and positions for its symbol"}),"\n",(0,t.jsx)(r.li,{children:"Implements specific trading logic (grid, scalping, arbitrage, etc.)"}),"\n",(0,t.jsx)(r.li,{children:"Works independently from other baskets, ensuring risk isolation"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"multi-currency-architecture",children:"Multi-Currency Architecture"}),"\n",(0,t.jsx)(r.p,{children:"The key advantage of this architecture lies in the ability to create multi-currency trading bots:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"One Script - Multiple Symbols"}),": Within one script, you can simultaneously trade on multiple trading pairs (BTC/USDT, ETH/USDT, XRP/USDT, etc.)"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Independent Baskets"}),": Each ",(0,t.jsx)(r.code,{children:"OrdersBasket"})," works with one trading pair independently from others, which means:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Error in one basket doesn't affect others"}),"\n",(0,t.jsx)(r.li,{children:"Each basket can have its own parameters and settings"}),"\n",(0,t.jsx)(r.li,{children:"Scalability - adding new trading pairs without changing existing code"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Centralized Management"}),": Script coordinates work of all baskets through global event system, ensuring:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Single configuration point"}),"\n",(0,t.jsx)(r.li,{children:"Centralized reporting and monitoring"}),"\n",(0,t.jsx)(r.li,{children:"Operation synchronization when needed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"trading-bot-lifecycle",children:"Trading Bot Lifecycle"}),"\n",(0,t.jsx)(r.p,{children:"As shown in the diagram above, the lifecycle includes the following stages:"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Script.constructor"})," - initialization of main script class"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Environment Subscribe"})," - subscription to market data (OrderBook, Ticker, Balance, Positions, Orders)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Script.init"})," - creation of OrdersBasket instances for each symbol"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Script.onStop"})," - proper shutdown and unsubscription from all events"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"Each stage interacts with all active baskets through the event system, ensuring loose coupling of components and high system reliability."}),"\n",(0,t.jsx)(r.p,{children:"This section contains recommendations and examples for creating effective and reliable trading scripts in JT-Lib."}),"\n",(0,t.jsx)(r.h2,{id:"script-parameter-definition",children:"Script Parameter Definition"}),"\n",(0,t.jsxs)(r.p,{children:["Use the static ",(0,t.jsx)(r.code,{children:"definedArgs"})," property to define script parameters with default values:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"class Script extends BaseScript {\r\n  // Define script parameters with default values\r\n  static definedArgs = [\r\n    {\r\n      key: 'symbols',\r\n      defaultValue: 'BCH/USDT,BTC/USDT,ADA/USDT,ETH/USDT,XRP/USDT',\r\n    },\r\n    {\r\n      key: 'sizeUsd',\r\n      defaultValue: 100,\r\n    },\r\n    {\r\n      key: 'gridStepPercent',\r\n      defaultValue: 5,\r\n    },\r\n    {\r\n      key: 'tpPercent',\r\n      defaultValue: 2,\r\n    },\r\n  ];\r\n\r\n  // Script metadata\r\n  name = 'Grid Bot Example';\r\n  description = 'Multi-coin grid strategy example';\r\n  version = 11;\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"using-ordersbasket-for-trading-logic",children:"Using OrdersBasket for Trading Logic"}),"\n",(0,t.jsxs)(r.p,{children:["It's recommended to extract trading logic into separate classes inheriting from ",(0,t.jsx)(r.code,{children:"OrdersBasket"}),". This ensures modularity and code reusability."]}),"\n",(0,t.jsx)(r.h3,{id:"example-gridbot-strategy",children:"Example: GridBot Strategy"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"\r\nclass Script extends BaseScript {\r\n  // Define script parameters\r\n  static definedArgs = [\r\n    {\r\n      key: 'symbols',\r\n      defaultValue: 'BCH/USDT,BTC/USDT,ADA/USDT,ETH/USDT,XRP/USDT,TRX/USDT,SOL/USDT,LTC/USDT,BNB/USDT,DOGE/USDT',\r\n    },\r\n    {\r\n      key: 'sizeUsd',\r\n      defaultValue: 100,\r\n    },\r\n    {\r\n      key: 'gridStepPercent',\r\n      defaultValue: 5,\r\n    },\r\n    {\r\n      key: 'tpPercent',\r\n      defaultValue: 2,\r\n    },\r\n  ];\r\n\r\n  // Script metadata\r\n  name = 'Grid Bot Example';\r\n  description = 'Multi-coin grid strategy example. Strategy logic is based in the GridBasket class.';\r\n  version = 11;\r\n\r\n  // Storage for baskets for each symbol\r\n  baskets: Record<string, GridBasket> = {};\r\n  private reportLayout: StandardReportLayout;\r\n\r\n  async onInit() {\r\n    // Initialize report\r\n    this.reportLayout = new StandardReportLayout();\r\n\r\n    // Create baskets with delay for connection stability\r\n    // This prevents connection issues during initialization\r\n    globals.triggers.addTaskByTime({\r\n      callback: this.createBaskets,\r\n      triggerTime: currentTime() + 60 * 1000, // 1 minute delay\r\n      name: 'createBaskets',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create basket for each symbol\r\n   * Each basket manages its grid strategy independently\r\n   */\r\n  createBaskets = async () => {\r\n    for (const symbol of this.symbols) {\r\n      // Create new GridBasket instance for each symbol\r\n      this.baskets[symbol] = new GridBasket({\r\n        symbol,\r\n        connectionName: this.connectionName,\r\n      });\r\n\r\n      // Initialize basket (connect to exchange, load position data)\r\n      await this.baskets[symbol].init();\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * GridBasket - Implements grid trading strategy\r\n *\r\n * Grid strategy works as follows:\r\n * 1. Open long position at market price\r\n * 2. Place limit buy orders below current price at regular intervals\r\n * 3. On price rise - close position with profit\r\n * 4. On price fall - execute limit orders, increase position size\r\n * 5. On price recovery - close larger position with profit\r\n */\r\nexport class GridBasket extends OrdersBasket {\r\n  // Strategy parameters\r\n  sizeUsd: number = getArgNumber('sizeUsd', 100); // Initial position size in USD\r\n  gridStepPercent = getArgNumber('gridStepPercent', 10); // Grid step size in percent\r\n  tpPercent = getArgNumber('tpPercent', 2); // Take profit percentage\r\n\r\n  async init() {\r\n    // Initialize parent OrdersBasket\r\n    await super.init();\r\n\r\n    if (this.isInit) {\r\n      // If no position, start new trading round\r\n      if ((await this.getPositionBySide('long')).contracts === 0) {\r\n        await this.newRound();\r\n      }\r\n    } else {\r\n      throw new BaseError('init error - super.init() failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start new trading round\r\n   * Opens initial long position and sets up grid orders\r\n   */\r\n  async newRound() {\r\n    // Open initial long position at market price\r\n    await this.buyMarket(this.getContractsAmount(this.sizeUsd));\r\n\r\n    // Create first grid order below current price\r\n    await this.createLimitByStep();\r\n  }\r\n\r\n  /**\r\n   * Close current round and start new one\r\n   * Closes position, cancels all orders and starts over\r\n   */\r\n  closeRound = async () => {\r\n    // Close long position\r\n    await this.closePosition('long');\r\n\r\n    // Clear all pending limit orders\r\n    await this.cancelAllOrders();\r\n\r\n    // Start new trading round\r\n    await this.newRound();\r\n  };\r\n\r\n  /**\r\n   * Called on each price tick\r\n   * Checks if take profit condition is met\r\n   */\r\n  async onTick() {\r\n    const position = await this.getPositionBySide('long');\r\n\r\n    // Check if current price exceeds take profit level\r\n    if (position.entryPrice && percentDifference(position.entryPrice, this.close()) > this.tpPercent) {\r\n      await this.closeRound();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on order status change\r\n   * Creates new grid orders when limit orders are executed\r\n   */\r\n  async onOrderChange(order: Order) {\r\n    // When limit buy order is executed (not reduce-only order)\r\n    if (order.status === 'closed' && order.reduceOnly === false && order.type === 'limit') {\r\n      // Create next grid order at lower price\r\n      await this.createLimitByStep();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create limit buy order one grid step below current price\r\n   * This order will execute on price fall, increasing position size\r\n   */\r\n  async createLimitByStep() {\r\n    // Calculate trigger price (grid step below current price)\r\n    const triggerPrice = this.close() * (1 - this.gridStepPercent / 100);\r\n\r\n    // Get current position size\r\n    const position = await this.getPositionBySide('long');\r\n    const amount = position.contracts;\r\n\r\n    // Place limit buy order\r\n    await this.buyLimit(amount, triggerPrice);\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"key-principles",children:"Key Principles"}),"\n",(0,t.jsx)(r.h3,{id:"1-modular-architecture",children:"1. Modular Architecture"}),"\n",(0,t.jsx)(r.p,{children:"Separate logic into different classes:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Script"})," - for coordination and management"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"OrdersBasket"})," - for trading logic of each symbol"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"2-initialization-delay",children:"2. Initialization Delay"}),"\n",(0,t.jsx)(r.p,{children:"Use triggers with delay for stable exchange connection:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"globals.triggers.addTaskByTime({\r\n  callback: this.createBaskets,\r\n  triggerTime: currentTime() + 60 * 1000, // 1 minute delay\r\n  name: 'createBaskets',\r\n});\n"})}),"\n",(0,t.jsx)(r.h3,{id:"3-parameter-definition",children:"3. Parameter Definition"}),"\n",(0,t.jsxs)(r.p,{children:["Use ",(0,t.jsx)(r.code,{children:"static definedArgs"})," to configure parameters with default values."]}),"\n",(0,t.jsx)(r.h3,{id:"4-script-metadata",children:"4. Script Metadata"}),"\n",(0,t.jsxs)(r.p,{children:["Add ",(0,t.jsx)(r.code,{children:"name"}),", ",(0,t.jsx)(r.code,{children:"description"}),", ",(0,t.jsx)(r.code,{children:"version"})," for script identification."]}),"\n",(0,t.jsx)(r.h3,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,t.jsxs)(r.p,{children:["Check ",(0,t.jsx)(r.code,{children:"isInit"})," before performing operations:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"if (this.isInit) {\r\n  // Safe operation execution\r\n} else {\r\n  throw new BaseError('init error - super.init() failed');\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"6-basket-independence",children:"6. Basket Independence"}),"\n",(0,t.jsx)(r.p,{children:"Each basket should work independently from others, ensuring scalability and error isolation."}),"\n",(0,t.jsx)(r.h3,{id:"7-reporting-usage",children:"7. Reporting Usage"}),"\n",(0,t.jsxs)(r.p,{children:["Initialize ",(0,t.jsx)(r.code,{children:"StandardReportLayout"})," to display strategy results."]}),"\n",(0,t.jsx)(r.h2,{id:"performance-recommendations",children:"Performance Recommendations"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Minimize API calls"})," - cache data where possible"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Use asynchronous operations"})," - don't block main thread"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Handle errors gracefully"})," - don't let one error stop entire strategy"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Monitor memory"})," - properly manage object lifecycle"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/docs/jt-lib/trading-scripts",children:"Trading Scripts"})})," - In-depth study of BaseScript"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/docs/jt-lib/exchange-orders-basket",children:"Exchange Orders Basket"})})," - Detailed study of OrdersBasket"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/docs/jt-lib/events-system",children:"Event System"})})," - EventEmitter for reactive strategies"]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var i=n(6540);const t={},s=i.createContext(t);function a(e){const r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);