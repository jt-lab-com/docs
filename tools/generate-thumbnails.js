#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É static/images –∏ —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—ã
 * –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –≤ static/images/thumbnails
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Sharp –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * 
 * –ê–≤—Ç–æ—Ä: JT-Lab Docs Team
 * –í–µ—Ä—Å–∏—è: 2.0.0
 */

const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // –ü—É—Ç–∏
  SOURCE_DIR: path.join(__dirname, '..', 'static', 'images'),
  THUMBNAILS_DIR: path.join(__dirname, '..', 'static', 'images', 'thumbnails'),
  LOGS_DIR: path.join(__dirname, '..', 'tools', 'logs'),
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–Ω–∏–∞—Ç—é—Ä
  THUMBNAIL_WIDTH: 300,
  THUMBNAIL_HEIGHT: 200,
  THUMBNAIL_QUALITY: 85,
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  SUPPORTED_FORMATS: ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.tiff', '.bmp'],
  
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è (—Ñ–∞–π–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—ã)
  EXCLUDE_PATTERNS: ['-thumb.', 'thumbnails', '.svg'],
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  LOG_LEVEL: 'INFO', // DEBUG, INFO, WARN, ERROR
  LOG_TO_FILE: true,
  LOG_TO_CONSOLE: true
};

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class Logger {
  constructor() {
    this.logFile = path.join(CONFIG.LOGS_DIR, `thumbnails-${this.getTimestamp()}.log`);
    this.ensureLogsDir();
  }

  ensureLogsDir() {
    if (!fs.existsSync(CONFIG.LOGS_DIR)) {
      fs.mkdirSync(CONFIG.LOGS_DIR, { recursive: true });
    }
  }

  getTimestamp() {
    return new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);
  }

  formatMessage(level, message, data = null) {
    const timestamp = new Date().toISOString();
    const dataStr = data ? ` | ${JSON.stringify(data)}` : '';
    return `[${timestamp}] [${level}] ${message}${dataStr}`;
  }

  log(level, message, data = null) {
    const formattedMessage = this.formatMessage(level, message, data);
    
    if (CONFIG.LOG_TO_CONSOLE) {
      const colors = {
        DEBUG: '\x1b[36m', // Cyan
        INFO: '\x1b[32m',  // Green
        WARN: '\x1b[33m',  // Yellow
        ERROR: '\x1b[31m', // Red
        RESET: '\x1b[0m'
      };
      console.log(`${colors[level]}${formattedMessage}${colors.RESET}`);
    }
    
    if (CONFIG.LOG_TO_FILE) {
      fs.appendFileSync(this.logFile, formattedMessage + '\n');
    }
  }

  debug(message, data = null) {
    if (CONFIG.LOG_LEVEL === 'DEBUG') {
      this.log('DEBUG', message, data);
    }
  }

  info(message, data = null) {
    if (['DEBUG', 'INFO'].includes(CONFIG.LOG_LEVEL)) {
      this.log('INFO', message, data);
    }
  }

  warn(message, data = null) {
    if (['DEBUG', 'INFO', 'WARN'].includes(CONFIG.LOG_LEVEL)) {
      this.log('WARN', message, data);
    }
  }

  error(message, data = null) {
    this.log('ERROR', message, data);
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä
class ThumbnailGenerator {
  constructor() {
    this.logger = new Logger();
    this.stats = {
      processed: 0,
      created: 0,
      skipped: 0,
      errors: 0,
      startTime: Date.now()
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
  isSupportedFormat(filename) {
    const ext = path.extname(filename).toLowerCase();
    return CONFIG.SUPPORTED_FORMATS.includes(ext);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª
  shouldExclude(filename) {
    return CONFIG.EXCLUDE_PATTERNS.some(pattern => 
      filename.toLowerCase().includes(pattern.toLowerCase())
    );
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  getImageFiles() {
    this.logger.info('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏', { 
      sourceDir: CONFIG.SOURCE_DIR 
    });

    if (!fs.existsSync(CONFIG.SOURCE_DIR)) {
      throw new Error(`–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${CONFIG.SOURCE_DIR}`);
    }

    const files = fs.readdirSync(CONFIG.SOURCE_DIR);
    const imageFiles = files.filter(file => {
      const fullPath = path.join(CONFIG.SOURCE_DIR, file);
      const stat = fs.statSync(fullPath);
      
      return stat.isFile() && 
             this.isSupportedFormat(file) && 
             !this.shouldExclude(file);
    });

    this.logger.info(`–ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`, {
      files: imageFiles
    });

    return imageFiles;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–∏–Ω–∏–∞—Ç—é—Ä–∞
  thumbnailExists(filename) {
    const thumbnailName = this.getThumbnailName(filename);
    const thumbnailPath = path.join(CONFIG.THUMBNAILS_DIR, thumbnailName);
    return fs.existsSync(thumbnailPath);
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã: image.jpg -> image-thumb.jpg
  getThumbnailName(filename) {
    const ext = path.extname(filename);
    const name = path.basename(filename, ext);
    return `${name}-thumb${ext}`;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Å –ø–æ–º–æ—â—å—é Sharp
  async createThumbnail(sourceFile, thumbnailFile) {
    try {
      const sourcePath = path.join(CONFIG.SOURCE_DIR, sourceFile);
      const thumbnailPath = path.join(CONFIG.THUMBNAILS_DIR, thumbnailFile);

      this.logger.debug('–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–∞—Ç—é—Ä—ã', {
        source: sourceFile,
        thumbnail: thumbnailFile,
        sourcePath,
        thumbnailPath
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
      const metadata = await sharp(sourcePath).metadata();
      this.logger.debug('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', {
        source: sourceFile,
        width: metadata.width,
        height: metadata.height,
        format: metadata.format,
        size: metadata.size
      });

      // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É —Å –ø–æ–º–æ—â—å—é Sharp
      await sharp(sourcePath)
        .resize(CONFIG.THUMBNAIL_WIDTH, CONFIG.THUMBNAIL_HEIGHT, {
          fit: 'cover', // –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
          position: 'center'
        })
        .jpeg({ 
          quality: CONFIG.THUMBNAIL_QUALITY,
          progressive: true // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π JPEG –¥–ª—è –ª—É—á—à–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        })
        .toFile(thumbnailPath);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
      if (fs.existsSync(thumbnailPath)) {
        const stats = fs.statSync(thumbnailPath);
        const compressionRatio = ((metadata.size - stats.size) / metadata.size * 100).toFixed(1);
        
        this.logger.info('–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', {
          source: sourceFile,
          thumbnail: thumbnailFile,
          originalSize: metadata.size,
          thumbnailSize: stats.size,
          compressionRatio: `${compressionRatio}%`,
          originalDimensions: `${metadata.width}x${metadata.height}`,
          thumbnailDimensions: `${CONFIG.THUMBNAIL_WIDTH}x${CONFIG.THUMBNAIL_HEIGHT}`
        });
        return true;
      } else {
        throw new Error('–§–∞–π–ª –º–∏–Ω–∏–∞—Ç—é—Ä—ã –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã', {
        source: sourceFile,
        thumbnail: thumbnailFile,
        error: error.message
      });
      return false;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
  ensureThumbnailsDir() {
    if (!fs.existsSync(CONFIG.THUMBNAILS_DIR)) {
      fs.mkdirSync(CONFIG.THUMBNAILS_DIR, { recursive: true });
      this.logger.info('–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä', { 
        dir: CONFIG.THUMBNAILS_DIR 
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Sharp
  async checkSharp() {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Sharp
      const testBuffer = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==', 'base64');
      await sharp(testBuffer).resize(1, 1).toBuffer();
      this.logger.info('‚úÖ Sharp —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return true;
    } catch (error) {
      throw new Error(`Sharp –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${error.message}`);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  async generate() {
    try {
      this.logger.info('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä —Å Sharp', {
        config: {
          sourceDir: CONFIG.SOURCE_DIR,
          thumbnailsDir: CONFIG.THUMBNAILS_DIR,
          thumbnailSize: `${CONFIG.THUMBNAIL_WIDTH}x${CONFIG.THUMBNAIL_HEIGHT}`,
          quality: CONFIG.THUMBNAIL_QUALITY
        }
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Sharp
      await this.checkSharp();

      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä
      this.ensureThumbnailsDir();

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageFiles = this.getImageFiles();

      if (imageFiles.length === 0) {
        this.logger.warn('‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      for (const imageFile of imageFiles) {
        this.stats.processed++;
        
        const thumbnailName = this.getThumbnailName(imageFile);
        
        if (this.thumbnailExists(imageFile)) {
          this.logger.info(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ (–º–∏–Ω–∏–∞—Ç—é—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`, {
            source: imageFile,
            thumbnail: thumbnailName
          });
          this.stats.skipped++;
          continue;
        }

        this.logger.info(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${this.stats.processed}/${imageFiles.length}`, {
          source: imageFile
        });

        const success = await this.createThumbnail(imageFile, thumbnailName);
        
        if (success) {
          this.stats.created++;
        } else {
          this.stats.errors++;
        }
      }

      // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const duration = Date.now() - this.stats.startTime;
      this.logger.info('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        stats: {
          ...this.stats,
          duration: `${duration}ms`,
          durationSeconds: `${(duration / 1000).toFixed(2)}s`
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª
      this.saveStats();

    } catch (error) {
      this.logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', {
        error: error.message,
        stack: error.stack
      });
      process.exit(1);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  saveStats() {
    const statsFile = path.join(CONFIG.LOGS_DIR, 'last-run-stats.json');
    const statsData = {
      ...this.stats,
      endTime: Date.now(),
      config: CONFIG,
      logFile: this.logger.logFile,
      engine: 'Sharp'
    };
    
    fs.writeFileSync(statsFile, JSON.stringify(statsData, null, 2));
    this.logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', { statsFile });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
  const args = process.argv.slice(2);
  
  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--debug':
        CONFIG.LOG_LEVEL = 'DEBUG';
        break;
      case '--width':
        CONFIG.THUMBNAIL_WIDTH = parseInt(args[++i]) || CONFIG.THUMBNAIL_WIDTH;
        break;
      case '--height':
        CONFIG.THUMBNAIL_HEIGHT = parseInt(args[++i]) || CONFIG.THUMBNAIL_HEIGHT;
        break;
      case '--quality':
        CONFIG.THUMBNAIL_QUALITY = parseInt(args[++i]) || CONFIG.THUMBNAIL_QUALITY;
        break;
      case '--help':
        console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node generate-thumbnails.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --debug              –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  --width <—á–∏—Å–ª–æ>      –®–∏—Ä–∏–Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${CONFIG.THUMBNAIL_WIDTH})
  --height <—á–∏—Å–ª–æ>     –í—ã—Å–æ—Ç–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${CONFIG.THUMBNAIL_HEIGHT})
  --quality <—á–∏—Å–ª–æ>    –ö–∞—á–µ—Å—Ç–≤–æ JPEG (1-100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${CONFIG.THUMBNAIL_QUALITY})
  --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  node generate-thumbnails.js
  node generate-thumbnails.js --debug
  node generate-thumbnails.js --width 400 --height 300 --quality 90

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Sharp –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  - –°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Å –∏–º–µ–Ω–µ–º: image.jpg -> image-thumb.jpg
  - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF, WebP, TIFF, BMP
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        `);
        process.exit(0);
        break;
    }
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üñºÔ∏è JT-Lab Docs - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä (Sharp)');
  console.log('============================================\n');

  parseArgs();

  const generator = new ThumbnailGenerator();
  await generator.generate();
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { ThumbnailGenerator, CONFIG };