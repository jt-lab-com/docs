"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[785],{140:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/best-pactice-v2-7deba6a0616bcf1fa02993aafc912101.png"},3584:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"jt-lib/script-best-practices","title":"Script Development Best Practices","description":"Script Lifecycle Architecture","source":"@site/docs/jt-lib/script-best-practices.md","sourceDirName":"jt-lib","slug":"/jt-lib/script-best-practices","permalink":"/docs/docs/jt-lib/script-best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/dev-zone-xs/jt-lab-docs/tree/main/git-docs-en/docs/docs/jt-lib/script-best-practices.md","tags":[],"version":"current","frontMatter":{"id":"script-best-practices","title":"Script Development Best Practices","sidebar_label":"Best Practices"},"sidebar":"tutorialSidebar","previous":{"title":"Script Launch","permalink":"/docs/docs/jt-lib/script-launch"},"next":{"title":"Core Fundamentals","permalink":"/docs/docs/jt-lib/core-fundamentals"}}');var r=i(4848),s=i(8453);const a={id:"script-best-practices",title:"Script Development Best Practices",sidebar_label:"Best Practices"},c="Script Development Best Practices",l={},o=[{value:"Multi-Currency Trading Bot Architecture",id:"multi-currency-trading-bot-architecture",level:2},{value:"Separation of Responsibilities Principle",id:"separation-of-responsibilities-principle",level:3},{value:"Multi-Currency Architecture",id:"multi-currency-architecture",level:3},{value:"Trading Bot Lifecycle",id:"trading-bot-lifecycle",level:3},{value:"Script Parameter Definition",id:"script-parameter-definition",level:2},{value:"Using OrdersBasket for Trading Logic",id:"using-ordersbasket-for-trading-logic",level:2},{value:"Example: GridBot Strategy",id:"example-gridbot-strategy",level:3},{value:"Key Principles",id:"key-principles",level:2},{value:"1. Modular Architecture",id:"1-modular-architecture",level:3},{value:"2. Initialization Delay",id:"2-initialization-delay",level:3},{value:"3. Parameter Definition",id:"3-parameter-definition",level:3},{value:"4. Script Metadata",id:"4-script-metadata",level:3},{value:"5. Error Handling",id:"5-error-handling",level:3},{value:"6. Basket Independence",id:"6-basket-independence",level:3},{value:"7. Reporting Usage",id:"7-reporting-usage",level:3},{value:"Performance Recommendations",id:"performance-recommendations",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"script-development-best-practices",children:"Script Development Best Practices"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Script Lifecycle Architecture",src:i(140).A+"",width:"1200",height:"672"})}),"\n",(0,r.jsx)(n.h2,{id:"multi-currency-trading-bot-architecture",children:"Multi-Currency Trading Bot Architecture"}),"\n",(0,r.jsxs)(n.p,{children:["This section describes the key principles for creating effective and reliable trading scripts in JT-Lib, based on separation of responsibilities between the ",(0,r.jsx)(n.code,{children:"Script"})," and ",(0,r.jsx)(n.code,{children:"OrdersBasket"})," classes."]}),"\n",(0,r.jsx)(n.h3,{id:"separation-of-responsibilities-principle",children:"Separation of Responsibilities Principle"}),"\n",(0,r.jsx)(n.p,{children:"JT-Lib architecture is built on clear role separation between two main components:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Script Class"})," serves as coordinator and manager:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Performs overall setup and configuration of trading strategy"}),"\n",(0,r.jsx)(n.li,{children:"Defines parameters for all trading pairs (symbols)"}),"\n",(0,r.jsxs)(n.li,{children:["Creates and manages ",(0,r.jsx)(n.code,{children:"OrdersBasket"})," instances for each symbol"]}),"\n",(0,r.jsx)(n.li,{children:"Monitors and controls all active baskets"}),"\n",(0,r.jsx)(n.li,{children:"Handles global events and coordinates work between different trading pairs"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"OrdersBasket Class"})," implements specific trading logic:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Contains the entire algorithm and trading strategy logic for a specific symbol"}),"\n",(0,r.jsx)(n.li,{children:"Connects to exchange and manages trading operations for one trading pair"}),"\n",(0,r.jsx)(n.li,{children:"Handles market data, orders, and positions for its symbol"}),"\n",(0,r.jsx)(n.li,{children:"Implements specific trading logic (grid, scalping, arbitrage, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"Works independently from other baskets, ensuring risk isolation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"multi-currency-architecture",children:"Multi-Currency Architecture"}),"\n",(0,r.jsx)(n.p,{children:"The key advantage of this architecture lies in the ability to create multi-currency trading bots:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"One Script - Multiple Symbols"}),": Within one script, you can simultaneously trade on multiple trading pairs (BTC/USDT, ETH/USDT, XRP/USDT, etc.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Independent Baskets"}),": Each ",(0,r.jsx)(n.code,{children:"OrdersBasket"})," works with one trading pair independently from others, which means:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Error in one basket doesn't affect others"}),"\n",(0,r.jsx)(n.li,{children:"Each basket can have its own parameters and settings"}),"\n",(0,r.jsx)(n.li,{children:"Scalability - adding new trading pairs without changing existing code"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Centralized Management"}),": Script coordinates work of all baskets through global event system, ensuring:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Single configuration point"}),"\n",(0,r.jsx)(n.li,{children:"Centralized reporting and monitoring"}),"\n",(0,r.jsx)(n.li,{children:"Operation synchronization when needed"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"trading-bot-lifecycle",children:"Trading Bot Lifecycle"}),"\n",(0,r.jsx)(n.p,{children:"As shown in the diagram above, the lifecycle includes the following stages:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Script.constructor"})," - initialization of main script class"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Environment Subscribe"})," - subscription to market data (OrderBook, Ticker, Balance, Positions, Orders)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Script.init"})," - creation of OrdersBasket instances for each symbol"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Script.onStop"})," - proper shutdown and unsubscription from all events"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each stage interacts with all active baskets through the event system, ensuring loose coupling of components and high system reliability."}),"\n",(0,r.jsx)(n.p,{children:"This section contains recommendations and examples for creating effective and reliable trading scripts in JT-Lib."}),"\n",(0,r.jsx)(n.h2,{id:"script-parameter-definition",children:"Script Parameter Definition"}),"\n",(0,r.jsxs)(n.p,{children:["Use the static ",(0,r.jsx)(n.code,{children:"definedArgs"})," property to define script parameters with default values:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class Script extends BaseScript {\n  // Define script parameters with default values\n  static definedArgs = [\n    {\n      key: 'symbols',\n      defaultValue: 'BCH/USDT,BTC/USDT,ADA/USDT,ETH/USDT,XRP/USDT',\n    },\n    {\n      key: 'sizeUsd',\n      defaultValue: 100,\n    },\n    {\n      key: 'gridStepPercent',\n      defaultValue: 5,\n    },\n    {\n      key: 'tpPercent',\n      defaultValue: 2,\n    },\n  ];\n\n  // Script metadata\n  name = 'Grid Bot Example';\n  description = 'Multi-coin grid strategy example';\n  version = 11;\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"using-ordersbasket-for-trading-logic",children:"Using OrdersBasket for Trading Logic"}),"\n",(0,r.jsxs)(n.p,{children:["It's recommended to extract trading logic into separate classes inheriting from ",(0,r.jsx)(n.code,{children:"OrdersBasket"}),". This ensures modularity and code reusability."]}),"\n",(0,r.jsx)(n.h3,{id:"example-gridbot-strategy",children:"Example: GridBot Strategy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"\nclass Script extends BaseScript {\n  // Define script parameters\n  static definedArgs = [\n    {\n      key: 'symbols',\n      defaultValue: 'BCH/USDT,BTC/USDT,ADA/USDT,ETH/USDT,XRP/USDT,TRX/USDT,SOL/USDT,LTC/USDT,BNB/USDT,DOGE/USDT',\n    },\n    {\n      key: 'sizeUsd',\n      defaultValue: 100,\n    },\n    {\n      key: 'gridStepPercent',\n      defaultValue: 5,\n    },\n    {\n      key: 'tpPercent',\n      defaultValue: 2,\n    },\n  ];\n\n  // Script metadata\n  name = 'Grid Bot Example';\n  description = 'Multi-coin grid strategy example. Strategy logic is based in the GridBasket class.';\n  version = 11;\n\n  // Storage for baskets for each symbol\n  baskets: Record<string, GridBasket> = {};\n  private reportLayout: StandardReportLayout;\n\n  async onInit() {\n    // Initialize report\n    this.reportLayout = new StandardReportLayout();\n\n    // Create baskets with delay for connection stability\n    // This prevents connection issues during initialization\n    globals.triggers.addTaskByTime({\n      callback: this.createBaskets,\n      triggerTime: currentTime() + 60 * 1000, // 1 minute delay\n      name: 'createBaskets',\n    });\n  }\n\n  /**\n   * Create basket for each symbol\n   * Each basket manages its grid strategy independently\n   */\n  createBaskets = async () => {\n    for (const symbol of this.symbols) {\n      // Create new GridBasket instance for each symbol\n      this.baskets[symbol] = new GridBasket({\n        symbol,\n        connectionName: this.connectionName,\n      });\n\n      // Initialize basket (connect to exchange, load position data)\n      await this.baskets[symbol].init();\n    }\n  };\n}\n\n/**\n * GridBasket - Implements grid trading strategy\n *\n * Grid strategy works as follows:\n * 1. Open long position at market price\n * 2. Place limit buy orders below current price at regular intervals\n * 3. On price rise - close position with profit\n * 4. On price fall - execute limit orders, increase position size\n * 5. On price recovery - close larger position with profit\n */\nexport class GridBasket extends OrdersBasket {\n  // Strategy parameters\n  sizeUsd: number = getArgNumber('sizeUsd', 100); // Initial position size in USD\n  gridStepPercent = getArgNumber('gridStepPercent', 10); // Grid step size in percent\n  tpPercent = getArgNumber('tpPercent', 2); // Take profit percentage\n\n  async init() {\n    // Initialize parent OrdersBasket\n    await super.init();\n\n    if (this.isInit) {\n      // If no position, start new trading round\n      if ((await this.getPositionBySide('long')).contracts === 0) {\n        await this.newRound();\n      }\n    } else {\n      throw new BaseError('init error - super.init() failed');\n    }\n  }\n\n  /**\n   * Start new trading round\n   * Opens initial long position and sets up grid orders\n   */\n  async newRound() {\n    // Open initial long position at market price\n    await this.buyMarket(this.getContractsAmount(this.sizeUsd));\n\n    // Create first grid order below current price\n    await this.createLimitByStep();\n  }\n\n  /**\n   * Close current round and start new one\n   * Closes position, cancels all orders and starts over\n   */\n  closeRound = async () => {\n    // Close long position\n    await this.closePosition('long');\n\n    // Clear all pending limit orders\n    await this.cancelAllOrders();\n\n    // Start new trading round\n    await this.newRound();\n  };\n\n  /**\n   * Called on each price tick\n   * Checks if take profit condition is met\n   */\n  async onTick() {\n    const position = await this.getPositionBySide('long');\n\n    // Check if current price exceeds take profit level\n    if (position.entryPrice && percentDifference(position.entryPrice, this.close()) > this.tpPercent) {\n      await this.closeRound();\n    }\n  }\n\n  /**\n   * Called on order status change\n   * Creates new grid orders when limit orders are executed\n   */\n  async onOrderChange(order: Order) {\n    // When limit buy order is executed (not reduce-only order)\n    if (order.status === 'closed' && order.reduceOnly === false && order.type === 'limit') {\n      // Create next grid order at lower price\n      await this.createLimitByStep();\n    }\n  }\n\n  /**\n   * Create limit buy order one grid step below current price\n   * This order will execute on price fall, increasing position size\n   */\n  async createLimitByStep() {\n    // Calculate trigger price (grid step below current price)\n    const triggerPrice = this.close() * (1 - this.gridStepPercent / 100);\n\n    // Get current position size\n    const position = await this.getPositionBySide('long');\n    const amount = position.contracts;\n\n    // Place limit buy order\n    await this.buyLimit(amount, triggerPrice);\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-principles",children:"Key Principles"}),"\n",(0,r.jsx)(n.h3,{id:"1-modular-architecture",children:"1. Modular Architecture"}),"\n",(0,r.jsx)(n.p,{children:"Separate logic into different classes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Script"})," - for coordination and management"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OrdersBasket"})," - for trading logic of each symbol"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-initialization-delay",children:"2. Initialization Delay"}),"\n",(0,r.jsx)(n.p,{children:"Use triggers with delay for stable exchange connection:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"globals.triggers.addTaskByTime({\n  callback: this.createBaskets,\n  triggerTime: currentTime() + 60 * 1000, // 1 minute delay\n  name: 'createBaskets',\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-parameter-definition",children:"3. Parameter Definition"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"static definedArgs"})," to configure parameters with default values."]}),"\n",(0,r.jsx)(n.h3,{id:"4-script-metadata",children:"4. Script Metadata"}),"\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"name"}),", ",(0,r.jsx)(n.code,{children:"description"}),", ",(0,r.jsx)(n.code,{children:"version"})," for script identification."]}),"\n",(0,r.jsx)(n.h3,{id:"5-error-handling",children:"5. Error Handling"}),"\n",(0,r.jsxs)(n.p,{children:["Check ",(0,r.jsx)(n.code,{children:"isInit"})," before performing operations:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"if (this.isInit) {\n  // Safe operation execution\n} else {\n  throw new BaseError('init error - super.init() failed');\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"6-basket-independence",children:"6. Basket Independence"}),"\n",(0,r.jsx)(n.p,{children:"Each basket should work independently from others, ensuring scalability and error isolation."}),"\n",(0,r.jsx)(n.h3,{id:"7-reporting-usage",children:"7. Reporting Usage"}),"\n",(0,r.jsxs)(n.p,{children:["Initialize ",(0,r.jsx)(n.code,{children:"StandardReportLayout"})," to display strategy results."]}),"\n",(0,r.jsx)(n.h2,{id:"performance-recommendations",children:"Performance Recommendations"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimize API calls"})," - cache data where possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use asynchronous operations"})," - don't block main thread"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Handle errors gracefully"})," - don't let one error stop entire strategy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor memory"})," - properly manage object lifecycle"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/jt-lib/trading-scripts",children:"Trading Scripts"})})," - In-depth study of BaseScript"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/jt-lib/exchange-orders-basket",children:"Exchange Orders Basket"})})," - Detailed study of OrdersBasket"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/jt-lib/events-system",children:"Event System"})})," - EventEmitter for reactive strategies"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);